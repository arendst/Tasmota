
// Automatically generated from LVGL source with `python3 preprocessor.py`
// Extract function signatures from LVGL APIs in headers

// Custom Tasmota functions
lv_ts_calibration_t * lv_get_ts_calibration(void);

// ======================================================================
// LV top level functions
// ======================================================================

// resolution
lv_coord_t lv_get_hor_res(void);
lv_coord_t lv_get_ver_res(void);

// ======================================================================
// Generated from headers
// ======================================================================


// ../../lvgl/src/../lvgl.h
static inline int lv_version_major(void)
static inline int lv_version_minor(void)
static inline int lv_version_patch(void)
static inline const char * lv_version_info(void)

// ../../lvgl/src/core/lv_global.h
lv_global_t * lv_global_default(void)

// ../../lvgl/src/core/lv_group.h
lv_group_t * lv_group_create(void)
void lv_group_delete(lv_group_t * group)
void lv_group_set_default(lv_group_t * group)
lv_group_t * lv_group_get_default(void)
void lv_group_add_obj(lv_group_t * group, lv_obj_t * obj)
void lv_group_swap_obj(lv_obj_t * obj1, lv_obj_t * obj2)
void lv_group_remove_obj(lv_obj_t * obj)
void lv_group_remove_all_objs(lv_group_t * group)
void lv_group_focus_obj(lv_obj_t * obj)
void lv_group_focus_next(lv_group_t * group)
void lv_group_focus_prev(lv_group_t * group)
void lv_group_focus_freeze(lv_group_t * group, bool en)
lv_result_t lv_group_send_data(lv_group_t * group, uint32_t c)
void lv_group_set_focus_cb(lv_group_t * group, lv_group_focus_cb_t focus_cb)
void lv_group_set_edge_cb(lv_group_t * group, lv_group_edge_cb_t edge_cb)
void lv_group_set_refocus_policy(lv_group_t * group, lv_group_refocus_policy_t policy)
void lv_group_set_editing(lv_group_t * group, bool edit)
void lv_group_set_wrap(lv_group_t * group, bool en)
lv_obj_t * lv_group_get_focused(const lv_group_t * group)
lv_group_focus_cb_t lv_group_get_focus_cb(const lv_group_t * group)
lv_group_edge_cb_t lv_group_get_edge_cb(const lv_group_t * group)
bool lv_group_get_editing(const lv_group_t * group)
bool lv_group_get_wrap(lv_group_t * group)
uint32_t lv_group_get_obj_count(lv_group_t * group)
uint32_t lv_group_get_count(void)
lv_group_t * lv_group_by_index(uint32_t index)

// ../../lvgl/src/core/lv_obj.h
lv_obj_t * lv_obj_create(lv_obj_t * parent)
void lv_obj_add_flag(lv_obj_t * obj, lv_obj_flag_t f)
void lv_obj_remove_flag(lv_obj_t * obj, lv_obj_flag_t f)
void lv_obj_update_flag(lv_obj_t * obj, lv_obj_flag_t f, bool v)
void lv_obj_add_state(lv_obj_t * obj, lv_state_t state)
void lv_obj_remove_state(lv_obj_t * obj, lv_state_t state)
void lv_obj_set_state(lv_obj_t * obj, lv_state_t state, bool v)
static inline void lv_obj_set_user_data(lv_obj_t * obj, void * user_data)
bool lv_obj_has_flag(const lv_obj_t * obj, lv_obj_flag_t f)
bool lv_obj_has_flag_any(const lv_obj_t * obj, lv_obj_flag_t f)
lv_state_t lv_obj_get_state(const lv_obj_t * obj)
bool lv_obj_has_state(const lv_obj_t * obj, lv_state_t state)
lv_group_t * lv_obj_get_group(const lv_obj_t * obj)
static inline void * lv_obj_get_user_data(lv_obj_t * obj)
void lv_obj_allocate_spec_attr(lv_obj_t * obj)
bool lv_obj_check_type(const lv_obj_t * obj, const lv_obj_class_t * class_p)
bool lv_obj_has_class(const lv_obj_t * obj, const lv_obj_class_t * class_p)
const lv_obj_class_t * lv_obj_get_class(const lv_obj_t * obj)
bool lv_obj_is_valid(const lv_obj_t * obj)
void lv_obj_assign_id(const lv_obj_class_t * class_p, lv_obj_t * obj)
void lv_obj_free_id(lv_obj_t * obj)
const char * lv_obj_stringify_id(lv_obj_t * obj, char * buf, uint32_t len)
void lv_objid_builtin_destroy(void)

// ../../lvgl/src/core/lv_obj_class.h
lv_obj_t * lv_obj_class_create_obj(const lv_obj_class_t * class_p, lv_obj_t * parent)
void lv_obj_class_init_obj(lv_obj_t * obj)
bool lv_obj_is_editable(lv_obj_t * obj)
bool lv_obj_is_group_def(lv_obj_t * obj)

// ../../lvgl/src/core/lv_obj_draw.h
void lv_obj_init_draw_rect_dsc(lv_obj_t * obj, uint32_t part, lv_draw_rect_dsc_t * draw_dsc)
void lv_obj_init_draw_label_dsc(lv_obj_t * obj, uint32_t part, lv_draw_label_dsc_t * draw_dsc)
void lv_obj_init_draw_image_dsc(lv_obj_t * obj, uint32_t part, lv_draw_image_dsc_t * draw_dsc)
void lv_obj_init_draw_line_dsc(lv_obj_t * obj, uint32_t part, lv_draw_line_dsc_t * draw_dsc)
void lv_obj_init_draw_arc_dsc(lv_obj_t * obj, uint32_t part, lv_draw_arc_dsc_t * draw_dsc)
int32_t lv_obj_calculate_ext_draw_size(lv_obj_t * obj, uint32_t part)
void lv_obj_refresh_ext_draw_size(lv_obj_t * obj)

// ../../lvgl/src/core/lv_obj_event.h
lv_result_t lv_obj_send_event(lv_obj_t * obj, lv_event_code_t event_code, void * param)
lv_result_t lv_obj_event_base(const lv_obj_class_t * class_p, lv_event_t * e)
lv_obj_t * lv_event_get_current_target_obj(lv_event_t * e)
lv_obj_t * lv_event_get_target_obj(lv_event_t * e)
lv_event_dsc_t * lv_obj_add_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb, lv_event_code_t filter, void * user_data)
uint32_t lv_obj_get_event_count(lv_obj_t * obj)
lv_event_dsc_t * lv_obj_get_event_dsc(lv_obj_t * obj, uint32_t index)
bool lv_obj_remove_event(lv_obj_t * obj, uint32_t index)
bool lv_obj_remove_event_cb(lv_obj_t * obj, lv_event_cb_t event_cb)
bool lv_obj_remove_event_dsc(lv_obj_t * obj, lv_event_dsc_t * dsc)
uint32_t lv_obj_remove_event_cb_with_user_data(lv_obj_t * obj, lv_event_cb_t event_cb, void * user_data)
lv_indev_t * lv_event_get_indev(lv_event_t * e)
lv_layer_t * lv_event_get_layer(lv_event_t * e)
const lv_area_t * lv_event_get_old_size(lv_event_t * e)
uint32_t lv_event_get_key(lv_event_t * e)
int32_t lv_event_get_rotary_diff(lv_event_t * e)
lv_anim_t * lv_event_get_scroll_anim(lv_event_t * e)
void lv_event_set_ext_draw_size(lv_event_t * e, int32_t size)
lv_point_t * lv_event_get_self_size_info(lv_event_t * e)
lv_hit_test_info_t * lv_event_get_hit_test_info(lv_event_t * e)
const lv_area_t * lv_event_get_cover_area(lv_event_t * e)
void lv_event_set_cover_res(lv_event_t * e, lv_cover_res_t res)
lv_draw_task_t * lv_event_get_draw_task(lv_event_t * e)

// ../../lvgl/src/core/lv_obj_pos.h
void lv_obj_set_pos(lv_obj_t * obj, int32_t x, int32_t y)
void lv_obj_set_x(lv_obj_t * obj, int32_t x)
void lv_obj_set_y(lv_obj_t * obj, int32_t y)
void lv_obj_set_size(lv_obj_t * obj, int32_t w, int32_t h)
bool lv_obj_refr_size(lv_obj_t * obj)
void lv_obj_set_width(lv_obj_t * obj, int32_t w)
void lv_obj_set_height(lv_obj_t * obj, int32_t h)
void lv_obj_set_content_width(lv_obj_t * obj, int32_t w)
void lv_obj_set_content_height(lv_obj_t * obj, int32_t h)
void lv_obj_set_layout(lv_obj_t * obj, uint32_t layout)
bool lv_obj_is_layout_positioned(const lv_obj_t * obj)
void lv_obj_mark_layout_as_dirty(lv_obj_t * obj)
void lv_obj_update_layout(const lv_obj_t * obj)
void lv_obj_set_align(lv_obj_t * obj, lv_align_t align)
void lv_obj_align(lv_obj_t * obj, lv_align_t align, int32_t x_ofs, int32_t y_ofs)
void lv_obj_align_to(lv_obj_t * obj, const lv_obj_t * base, lv_align_t align, int32_t x_ofs, int32_t y_ofs)
static inline void lv_obj_center(lv_obj_t * obj)
void lv_obj_get_coords(const lv_obj_t * obj, lv_area_t * coords)
int32_t lv_obj_get_x(const lv_obj_t * obj)
int32_t lv_obj_get_x2(const lv_obj_t * obj)
int32_t lv_obj_get_y(const lv_obj_t * obj)
int32_t lv_obj_get_y2(const lv_obj_t * obj)
int32_t lv_obj_get_x_aligned(const lv_obj_t * obj)
int32_t lv_obj_get_y_aligned(const lv_obj_t * obj)
int32_t lv_obj_get_width(const lv_obj_t * obj)
int32_t lv_obj_get_height(const lv_obj_t * obj)
int32_t lv_obj_get_content_width(const lv_obj_t * obj)
int32_t lv_obj_get_content_height(const lv_obj_t * obj)
void lv_obj_get_content_coords(const lv_obj_t * obj, lv_area_t * area)
int32_t lv_obj_get_self_width(const lv_obj_t * obj)
int32_t lv_obj_get_self_height(const lv_obj_t * obj)
bool lv_obj_refresh_self_size(lv_obj_t * obj)
void lv_obj_refr_pos(lv_obj_t * obj)
void lv_obj_move_to(lv_obj_t * obj, int32_t x, int32_t y)
void lv_obj_move_children_by(lv_obj_t * obj, int32_t x_diff, int32_t y_diff, bool ignore_floating)
void lv_obj_transform_point(const lv_obj_t * obj, lv_point_t * p, lv_obj_point_transform_flag_t flags)
void lv_obj_transform_point_array(const lv_obj_t * obj, lv_point_t points[], size_t count, lv_obj_point_transform_flag_t flags)
void lv_obj_get_transformed_area(const lv_obj_t * obj, lv_area_t * area, lv_obj_point_transform_flag_t flags)
void lv_obj_invalidate_area(const lv_obj_t * obj, const lv_area_t * area)
void lv_obj_invalidate(const lv_obj_t * obj)
bool lv_obj_area_is_visible(const lv_obj_t * obj, lv_area_t * area)
bool lv_obj_is_visible(const lv_obj_t * obj)
void lv_obj_set_ext_click_area(lv_obj_t * obj, int32_t size)
void lv_obj_get_click_area(const lv_obj_t * obj, lv_area_t * area)
bool lv_obj_hit_test(lv_obj_t * obj, const lv_point_t * point)
int32_t lv_clamp_width(int32_t width, int32_t min_width, int32_t max_width, int32_t ref_width)
int32_t lv_clamp_height(int32_t height, int32_t min_height, int32_t max_height, int32_t ref_height)

// ../../lvgl/src/core/lv_obj_property.h

// ../../lvgl/src/core/lv_obj_scroll.h
void lv_obj_set_scrollbar_mode(lv_obj_t * obj, lv_scrollbar_mode_t mode)
void lv_obj_set_scroll_dir(lv_obj_t * obj, lv_dir_t dir)
void lv_obj_set_scroll_snap_x(lv_obj_t * obj, lv_scroll_snap_t align)
void lv_obj_set_scroll_snap_y(lv_obj_t * obj, lv_scroll_snap_t align)
lv_scrollbar_mode_t lv_obj_get_scrollbar_mode(const lv_obj_t * obj)
lv_dir_t lv_obj_get_scroll_dir(const lv_obj_t * obj)
lv_scroll_snap_t lv_obj_get_scroll_snap_x(const lv_obj_t * obj)
lv_scroll_snap_t lv_obj_get_scroll_snap_y(const lv_obj_t * obj)
int32_t lv_obj_get_scroll_x(const lv_obj_t * obj)
int32_t lv_obj_get_scroll_y(const lv_obj_t * obj)
int32_t lv_obj_get_scroll_top(lv_obj_t * obj)
int32_t lv_obj_get_scroll_bottom(lv_obj_t * obj)
int32_t lv_obj_get_scroll_left(lv_obj_t * obj)
int32_t lv_obj_get_scroll_right(lv_obj_t * obj)
void lv_obj_get_scroll_end(lv_obj_t * obj, lv_point_t * end)
void lv_obj_scroll_by(lv_obj_t * obj, int32_t x, int32_t y, lv_anim_enable_t anim_en)
void lv_obj_scroll_by_bounded(lv_obj_t * obj, int32_t dx, int32_t dy, lv_anim_enable_t anim_en)
void lv_obj_scroll_to(lv_obj_t * obj, int32_t x, int32_t y, lv_anim_enable_t anim_en)
void lv_obj_scroll_to_x(lv_obj_t * obj, int32_t x, lv_anim_enable_t anim_en)
void lv_obj_scroll_to_y(lv_obj_t * obj, int32_t y, lv_anim_enable_t anim_en)
void lv_obj_scroll_to_view(lv_obj_t * obj, lv_anim_enable_t anim_en)
void lv_obj_scroll_to_view_recursive(lv_obj_t * obj, lv_anim_enable_t anim_en)
bool lv_obj_is_scrolling(const lv_obj_t * obj)
void lv_obj_update_snap(lv_obj_t * obj, lv_anim_enable_t anim_en)
void lv_obj_get_scrollbar_area(lv_obj_t * obj, lv_area_t * hor, lv_area_t * ver)
void lv_obj_scrollbar_invalidate(lv_obj_t * obj)
void lv_obj_readjust_scroll(lv_obj_t * obj, lv_anim_enable_t anim_en)

// ../../lvgl/src/core/lv_obj_style.h
void lv_obj_add_style(lv_obj_t * obj, const lv_style_t * style, lv_style_selector_t selector)
bool lv_obj_replace_style(lv_obj_t * obj, const lv_style_t * old_style, const lv_style_t * new_style, lv_style_selector_t selector)
void lv_obj_remove_style(lv_obj_t * obj, const lv_style_t * style, lv_style_selector_t selector)
void lv_obj_remove_style_all(lv_obj_t * obj)
void lv_obj_report_style_change(lv_style_t * style)
void lv_obj_refresh_style(lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop)
void lv_obj_enable_style_refresh(bool en)
lv_style_value_t lv_obj_get_style_prop(const lv_obj_t * obj, lv_part_t part, lv_style_prop_t prop)
bool lv_obj_has_style_prop(const lv_obj_t * obj, lv_style_selector_t selector, lv_style_prop_t prop)
void lv_obj_set_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_value_t value, lv_style_selector_t selector)
lv_style_res_t lv_obj_get_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_value_t * value, lv_style_selector_t selector)
bool lv_obj_remove_local_style_prop(lv_obj_t * obj, lv_style_prop_t prop, lv_style_selector_t selector)
void lv_obj_fade_in(lv_obj_t * obj, uint32_t time, uint32_t delay)
void lv_obj_fade_out(lv_obj_t * obj, uint32_t time, uint32_t delay)
static inline lv_state_t lv_obj_style_get_selector_state(lv_style_selector_t selector)
static inline lv_part_t lv_obj_style_get_selector_part(lv_style_selector_t selector)
static inline void lv_obj_set_style_pad_all(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
static inline void lv_obj_set_style_pad_hor(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
static inline void lv_obj_set_style_pad_ver(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
static inline void lv_obj_set_style_margin_all(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
static inline void lv_obj_set_style_margin_hor(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
static inline void lv_obj_set_style_margin_ver(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
static inline void lv_obj_set_style_pad_gap(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
static inline void lv_obj_set_style_size(lv_obj_t * obj, int32_t width, int32_t height, lv_style_selector_t selector)
static inline void lv_obj_set_style_transform_scale(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
static inline int32_t lv_obj_get_style_space_left(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_space_right(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_space_top(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_space_bottom(const lv_obj_t * obj, uint32_t part)
lv_text_align_t lv_obj_calculate_style_text_align(const lv_obj_t * obj, lv_part_t part, const char * txt)
static inline int32_t lv_obj_get_style_transform_scale_x_safe(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_transform_scale_y_safe(const lv_obj_t * obj, uint32_t part)
lv_opa_t lv_obj_get_style_opa_recursive(const lv_obj_t * obj, lv_part_t part)

// ../../lvgl/src/core/lv_obj_style_gen.h
static inline int32_t lv_obj_get_style_width(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_min_width(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_max_width(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_height(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_min_height(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_max_height(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_length(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_x(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_y(const lv_obj_t * obj, uint32_t part)
static inline lv_align_t lv_obj_get_style_align(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_transform_width(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_transform_height(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_translate_x(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_translate_y(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_transform_scale_x(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_transform_scale_y(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_transform_rotation(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_transform_pivot_x(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_transform_pivot_y(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_transform_skew_x(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_transform_skew_y(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_pad_top(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_pad_bottom(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_pad_left(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_pad_right(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_pad_row(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_pad_column(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_margin_top(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_margin_bottom(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_margin_left(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_margin_right(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_bg_color(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_bg_color_filtered(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_bg_opa(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_bg_grad_color(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_bg_grad_color_filtered(const lv_obj_t * obj, uint32_t part)
static inline lv_grad_dir_t lv_obj_get_style_bg_grad_dir(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_bg_main_stop(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_bg_grad_stop(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_bg_main_opa(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_bg_grad_opa(const lv_obj_t * obj, uint32_t part)
static inline const lv_grad_dsc_t * lv_obj_get_style_bg_grad(const lv_obj_t * obj, uint32_t part)
static inline const void * lv_obj_get_style_bg_image_src(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_bg_image_opa(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_bg_image_recolor(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_bg_image_recolor_filtered(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_bg_image_recolor_opa(const lv_obj_t * obj, uint32_t part)
static inline bool lv_obj_get_style_bg_image_tiled(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_border_color(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_border_color_filtered(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_border_opa(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_border_width(const lv_obj_t * obj, uint32_t part)
static inline lv_border_side_t lv_obj_get_style_border_side(const lv_obj_t * obj, uint32_t part)
static inline bool lv_obj_get_style_border_post(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_outline_width(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_outline_color(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_outline_color_filtered(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_outline_opa(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_outline_pad(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_shadow_width(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_shadow_offset_x(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_shadow_offset_y(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_shadow_spread(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_shadow_color(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_shadow_color_filtered(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_shadow_opa(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_image_opa(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_image_recolor(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_image_recolor_filtered(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_image_recolor_opa(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_line_width(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_line_dash_width(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_line_dash_gap(const lv_obj_t * obj, uint32_t part)
static inline bool lv_obj_get_style_line_rounded(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_line_color(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_line_color_filtered(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_line_opa(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_arc_width(const lv_obj_t * obj, uint32_t part)
static inline bool lv_obj_get_style_arc_rounded(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_arc_color(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_arc_color_filtered(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_arc_opa(const lv_obj_t * obj, uint32_t part)
static inline const void * lv_obj_get_style_arc_image_src(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_text_color(const lv_obj_t * obj, uint32_t part)
static inline lv_color_t lv_obj_get_style_text_color_filtered(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_text_opa(const lv_obj_t * obj, uint32_t part)
static inline const lv_font_t * lv_obj_get_style_text_font(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_text_letter_space(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_text_line_space(const lv_obj_t * obj, uint32_t part)
static inline lv_text_decor_t lv_obj_get_style_text_decor(const lv_obj_t * obj, uint32_t part)
static inline lv_text_align_t lv_obj_get_style_text_align(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_radius(const lv_obj_t * obj, uint32_t part)
static inline bool lv_obj_get_style_clip_corner(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_opa(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_opa_layered(const lv_obj_t * obj, uint32_t part)
static inline const lv_color_filter_dsc_t * lv_obj_get_style_color_filter_dsc(const lv_obj_t * obj, uint32_t part)
static inline lv_opa_t lv_obj_get_style_color_filter_opa(const lv_obj_t * obj, uint32_t part)
static inline const lv_anim_t * lv_obj_get_style_anim(const lv_obj_t * obj, uint32_t part)
static inline uint32_t lv_obj_get_style_anim_duration(const lv_obj_t * obj, uint32_t part)
static inline const lv_style_transition_dsc_t * lv_obj_get_style_transition(const lv_obj_t * obj, uint32_t part)
static inline lv_blend_mode_t lv_obj_get_style_blend_mode(const lv_obj_t * obj, uint32_t part)
static inline uint16_t lv_obj_get_style_layout(const lv_obj_t * obj, uint32_t part)
static inline lv_base_dir_t lv_obj_get_style_base_dir(const lv_obj_t * obj, uint32_t part)
static inline const lv_image_dsc_t * lv_obj_get_style_bitmap_mask_src(const lv_obj_t * obj, uint32_t part)
static inline uint32_t lv_obj_get_style_rotary_sensitivity(const lv_obj_t * obj, uint32_t part)
static inline lv_flex_flow_t lv_obj_get_style_flex_flow(const lv_obj_t * obj, uint32_t part)
static inline lv_flex_align_t lv_obj_get_style_flex_main_place(const lv_obj_t * obj, uint32_t part)
static inline lv_flex_align_t lv_obj_get_style_flex_cross_place(const lv_obj_t * obj, uint32_t part)
static inline lv_flex_align_t lv_obj_get_style_flex_track_place(const lv_obj_t * obj, uint32_t part)
static inline uint8_t lv_obj_get_style_flex_grow(const lv_obj_t * obj, uint32_t part)
static inline const int32_t * lv_obj_get_style_grid_column_dsc_array(const lv_obj_t * obj, uint32_t part)
static inline lv_grid_align_t lv_obj_get_style_grid_column_align(const lv_obj_t * obj, uint32_t part)
static inline const int32_t * lv_obj_get_style_grid_row_dsc_array(const lv_obj_t * obj, uint32_t part)
static inline lv_grid_align_t lv_obj_get_style_grid_row_align(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_grid_cell_column_pos(const lv_obj_t * obj, uint32_t part)
static inline lv_grid_align_t lv_obj_get_style_grid_cell_x_align(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_grid_cell_column_span(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_grid_cell_row_pos(const lv_obj_t * obj, uint32_t part)
static inline lv_grid_align_t lv_obj_get_style_grid_cell_y_align(const lv_obj_t * obj, uint32_t part)
static inline int32_t lv_obj_get_style_grid_cell_row_span(const lv_obj_t * obj, uint32_t part)
void lv_obj_set_style_width(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_min_width(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_max_width(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_height(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_min_height(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_max_height(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_length(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_x(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_y(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_align(lv_obj_t * obj, lv_align_t value, lv_style_selector_t selector)
void lv_obj_set_style_transform_width(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_transform_height(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_translate_x(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_translate_y(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_transform_scale_x(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_transform_scale_y(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_transform_rotation(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_transform_pivot_x(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_transform_pivot_y(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_transform_skew_x(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_transform_skew_y(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_pad_top(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_pad_bottom(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_pad_left(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_pad_right(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_pad_row(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_pad_column(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_margin_top(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_margin_bottom(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_margin_left(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_margin_right(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_color(lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_grad_color(lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_grad_dir(lv_obj_t * obj, lv_grad_dir_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_main_stop(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_grad_stop(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_main_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_grad_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_grad(lv_obj_t * obj, const lv_grad_dsc_t * value, lv_style_selector_t selector)
void lv_obj_set_style_bg_image_src(lv_obj_t * obj, const void * value, lv_style_selector_t selector)
void lv_obj_set_style_bg_image_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_image_recolor(lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_image_recolor_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_bg_image_tiled(lv_obj_t * obj, bool value, lv_style_selector_t selector)
void lv_obj_set_style_border_color(lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
void lv_obj_set_style_border_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_border_width(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_border_side(lv_obj_t * obj, lv_border_side_t value, lv_style_selector_t selector)
void lv_obj_set_style_border_post(lv_obj_t * obj, bool value, lv_style_selector_t selector)
void lv_obj_set_style_outline_width(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_outline_color(lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
void lv_obj_set_style_outline_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_outline_pad(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_shadow_width(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_shadow_offset_x(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_shadow_offset_y(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_shadow_spread(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_shadow_color(lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
void lv_obj_set_style_shadow_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_image_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_image_recolor(lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
void lv_obj_set_style_image_recolor_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_line_width(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_line_dash_width(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_line_dash_gap(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_line_rounded(lv_obj_t * obj, bool value, lv_style_selector_t selector)
void lv_obj_set_style_line_color(lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
void lv_obj_set_style_line_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_arc_width(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_arc_rounded(lv_obj_t * obj, bool value, lv_style_selector_t selector)
void lv_obj_set_style_arc_color(lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
void lv_obj_set_style_arc_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_arc_image_src(lv_obj_t * obj, const void * value, lv_style_selector_t selector)
void lv_obj_set_style_text_color(lv_obj_t * obj, lv_color_t value, lv_style_selector_t selector)
void lv_obj_set_style_text_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_text_font(lv_obj_t * obj, const lv_font_t * value, lv_style_selector_t selector)
void lv_obj_set_style_text_letter_space(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_text_line_space(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_text_decor(lv_obj_t * obj, lv_text_decor_t value, lv_style_selector_t selector)
void lv_obj_set_style_text_align(lv_obj_t * obj, lv_text_align_t value, lv_style_selector_t selector)
void lv_obj_set_style_radius(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_clip_corner(lv_obj_t * obj, bool value, lv_style_selector_t selector)
void lv_obj_set_style_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_opa_layered(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_color_filter_dsc(lv_obj_t * obj, const lv_color_filter_dsc_t * value, lv_style_selector_t selector)
void lv_obj_set_style_color_filter_opa(lv_obj_t * obj, lv_opa_t value, lv_style_selector_t selector)
void lv_obj_set_style_anim(lv_obj_t * obj, const lv_anim_t * value, lv_style_selector_t selector)
void lv_obj_set_style_anim_duration(lv_obj_t * obj, uint32_t value, lv_style_selector_t selector)
void lv_obj_set_style_transition(lv_obj_t * obj, const lv_style_transition_dsc_t * value, lv_style_selector_t selector)
void lv_obj_set_style_blend_mode(lv_obj_t * obj, lv_blend_mode_t value, lv_style_selector_t selector)
void lv_obj_set_style_layout(lv_obj_t * obj, uint16_t value, lv_style_selector_t selector)
void lv_obj_set_style_base_dir(lv_obj_t * obj, lv_base_dir_t value, lv_style_selector_t selector)
void lv_obj_set_style_bitmap_mask_src(lv_obj_t * obj, const lv_image_dsc_t * value, lv_style_selector_t selector)
void lv_obj_set_style_rotary_sensitivity(lv_obj_t * obj, uint32_t value, lv_style_selector_t selector)
void lv_obj_set_style_flex_flow(lv_obj_t * obj, lv_flex_flow_t value, lv_style_selector_t selector)
void lv_obj_set_style_flex_main_place(lv_obj_t * obj, lv_flex_align_t value, lv_style_selector_t selector)
void lv_obj_set_style_flex_cross_place(lv_obj_t * obj, lv_flex_align_t value, lv_style_selector_t selector)
void lv_obj_set_style_flex_track_place(lv_obj_t * obj, lv_flex_align_t value, lv_style_selector_t selector)
void lv_obj_set_style_flex_grow(lv_obj_t * obj, uint8_t value, lv_style_selector_t selector)
void lv_obj_set_style_grid_column_dsc_array(lv_obj_t * obj, const int32_t * value, lv_style_selector_t selector)
void lv_obj_set_style_grid_column_align(lv_obj_t * obj, lv_grid_align_t value, lv_style_selector_t selector)
void lv_obj_set_style_grid_row_dsc_array(lv_obj_t * obj, const int32_t * value, lv_style_selector_t selector)
void lv_obj_set_style_grid_row_align(lv_obj_t * obj, lv_grid_align_t value, lv_style_selector_t selector)
void lv_obj_set_style_grid_cell_column_pos(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_grid_cell_x_align(lv_obj_t * obj, lv_grid_align_t value, lv_style_selector_t selector)
void lv_obj_set_style_grid_cell_column_span(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_grid_cell_row_pos(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)
void lv_obj_set_style_grid_cell_y_align(lv_obj_t * obj, lv_grid_align_t value, lv_style_selector_t selector)
void lv_obj_set_style_grid_cell_row_span(lv_obj_t * obj, int32_t value, lv_style_selector_t selector)

// ../../lvgl/src/core/lv_obj_tree.h
void lv_obj_delete(lv_obj_t * obj)
void lv_obj_clean(lv_obj_t * obj)
void lv_obj_delete_delayed(lv_obj_t * obj, uint32_t delay_ms)
void lv_obj_delete_anim_completed_cb(lv_anim_t * a)
void lv_obj_delete_async(lv_obj_t * obj)
void lv_obj_set_parent(lv_obj_t * obj, lv_obj_t * parent)
void lv_obj_swap(lv_obj_t * obj1, lv_obj_t * obj2)
void lv_obj_move_to_index(lv_obj_t * obj, int32_t index)
lv_obj_t * lv_obj_get_screen(const lv_obj_t * obj)
lv_display_t * lv_obj_get_display(const lv_obj_t * obj)
lv_obj_t * lv_obj_get_parent(const lv_obj_t * obj)
lv_obj_t * lv_obj_get_child(const lv_obj_t * obj, int32_t idx)
lv_obj_t * lv_obj_get_child_by_type(const lv_obj_t * obj, int32_t idx, const lv_obj_class_t * class_p)
lv_obj_t * lv_obj_get_sibling(const lv_obj_t * obj, int32_t idx)
lv_obj_t * lv_obj_get_sibling_by_type(const lv_obj_t * obj, int32_t idx, const lv_obj_class_t * class_p)
uint32_t lv_obj_get_child_count(const lv_obj_t * obj)
uint32_t lv_obj_get_child_count_by_type(const lv_obj_t * obj, const lv_obj_class_t * class_p)
int32_t lv_obj_get_index(const lv_obj_t * obj)
int32_t lv_obj_get_index_by_type(const lv_obj_t * obj, const lv_obj_class_t * class_p)
void lv_obj_tree_walk(lv_obj_t * start_obj, lv_obj_tree_walk_cb_t cb, void * user_data)
void lv_obj_dump_tree(lv_obj_t * start_ob)

// ../../lvgl/src/core/lv_refr.h
void lv_refr_now(lv_display_t * disp)
void lv_obj_redraw(lv_layer_t * layer, lv_obj_t * obj)

// ../../lvgl/src/display/lv_display.h
lv_display_t * lv_display_create(int32_t hor_res, int32_t ver_res)
void lv_display_delete(lv_display_t * disp)
void lv_display_set_default(lv_display_t * disp)
lv_display_t * lv_display_get_default(void)
lv_display_t * lv_display_get_next(lv_display_t * disp)
void lv_display_set_resolution(lv_display_t * disp, int32_t hor_res, int32_t ver_res)
void lv_display_set_physical_resolution(lv_display_t * disp, int32_t hor_res, int32_t ver_res)
void lv_display_set_offset(lv_display_t * disp, int32_t x, int32_t y)
void lv_display_set_rotation(lv_display_t * disp, lv_display_rotation_t rotation)
void lv_display_set_dpi(lv_display_t * disp, int32_t dpi)
int32_t lv_display_get_horizontal_resolution(const lv_display_t * disp)
int32_t lv_display_get_vertical_resolution(const lv_display_t * disp)
int32_t lv_display_get_physical_horizontal_resolution(const lv_display_t * disp)
int32_t lv_display_get_physical_vertical_resolution(const lv_display_t * disp)
int32_t lv_display_get_offset_x(const lv_display_t * disp)
int32_t lv_display_get_offset_y(const lv_display_t * disp)
lv_display_rotation_t lv_display_get_rotation(lv_display_t * disp)
int32_t lv_display_get_dpi(const lv_display_t * disp)
void lv_display_set_buffers(lv_display_t * disp, void * buf1, void * buf2, uint32_t buf_size, lv_display_render_mode_t render_mode)
void lv_display_set_draw_buffers(lv_display_t * disp, lv_draw_buf_t * buf1, lv_draw_buf_t * buf2)
void lv_display_set_render_mode(lv_display_t * disp, lv_display_render_mode_t render_mode)
void lv_display_set_flush_cb(lv_display_t * disp, lv_display_flush_cb_t flush_cb)
void lv_display_set_flush_wait_cb(lv_display_t * disp, lv_display_flush_wait_cb_t wait_cb)
void lv_display_set_color_format(lv_display_t * disp, lv_color_format_t color_format)
lv_color_format_t lv_display_get_color_format(lv_display_t * disp)
void lv_display_set_antialiasing(lv_display_t * disp, bool en)
bool lv_display_get_antialiasing(lv_display_t * disp)
bool lv_display_is_double_buffered(lv_display_t * disp)
lv_obj_t * lv_display_get_screen_active(lv_display_t * disp)
lv_obj_t * lv_display_get_screen_prev(lv_display_t * disp)
lv_obj_t * lv_display_get_layer_top(lv_display_t * disp)
lv_obj_t * lv_display_get_layer_sys(lv_display_t * disp)
lv_obj_t * lv_display_get_layer_bottom(lv_display_t * disp)
void lv_screen_load(struct _lv_obj_t * scr)
void lv_screen_load_anim(lv_obj_t * scr, lv_screen_load_anim_t anim_type, uint32_t time, uint32_t delay, bool auto_del)
static inline lv_obj_t * lv_screen_active(void)
static inline lv_obj_t * lv_layer_top(void)
static inline lv_obj_t * lv_layer_sys(void)
static inline lv_obj_t * lv_layer_bottom(void)
void lv_display_add_event_cb(lv_display_t * disp, lv_event_cb_t event_cb, lv_event_code_t filter, void * user_data)
uint32_t lv_display_get_event_count(lv_display_t * disp)
lv_event_dsc_t * lv_display_get_event_dsc(lv_display_t * disp, uint32_t index)
bool lv_display_delete_event(lv_display_t * disp, uint32_t index)
uint32_t lv_display_remove_event_cb_with_user_data(lv_display_t * disp, lv_event_cb_t event_cb, void * user_data)
lv_result_t lv_display_send_event(lv_display_t * disp, lv_event_code_t code, void * param)
void lv_display_set_theme(lv_display_t * disp, lv_theme_t * th)
lv_theme_t * lv_display_get_theme(lv_display_t * disp)
uint32_t lv_display_get_inactive_time(const lv_display_t * disp)
void lv_display_trigger_activity(lv_display_t * disp)
void lv_display_enable_invalidation(lv_display_t * disp, bool en)
bool lv_display_is_invalidation_enabled(lv_display_t * disp)
lv_timer_t * lv_display_get_refr_timer(lv_display_t * disp)
void lv_display_delete_refr_timer(lv_display_t * disp)
void lv_display_set_user_data(lv_display_t * disp, void * user_data)
void lv_display_set_driver_data(lv_display_t * disp, void * driver_data)
void * lv_display_get_user_data(lv_display_t * disp)
void * lv_display_get_driver_data(lv_display_t * disp)
lv_draw_buf_t * lv_display_get_buf_active(lv_display_t * disp)
static inline int32_t lv_dpx(int32_t n)
static inline int32_t lv_display_dpx(const lv_display_t * disp, int32_t n)

// ../../lvgl/src/display/lv_display_private.h

// ../../lvgl/src/draw/lv_draw.h
void lv_draw_init(void)
void lv_draw_deinit(void)
void * lv_draw_create_unit(size_t size)
lv_draw_task_t * lv_draw_add_task(lv_layer_t * layer, const lv_area_t * coords)
void lv_draw_finalize_task_creation(lv_layer_t * layer, lv_draw_task_t * t)
void lv_draw_dispatch(void)
bool lv_draw_dispatch_layer(lv_display_t * disp, lv_layer_t * layer)
void lv_draw_dispatch_wait_for_request(void)
void lv_draw_dispatch_request(void)
lv_draw_task_t * lv_draw_get_next_available_task(lv_layer_t * layer, lv_draw_task_t * t_prev, uint8_t draw_unit_id)
uint32_t lv_draw_get_dependent_count(lv_draw_task_t * t_check)
lv_layer_t * lv_draw_layer_create(lv_layer_t * parent_layer, lv_color_format_t color_format, const lv_area_t * area)
void * lv_draw_layer_alloc_buf(lv_layer_t * layer)
void * lv_draw_layer_go_to_xy(lv_layer_t * layer, int32_t x, int32_t y)

// ../../lvgl/src/draw/lv_draw_arc.h
void lv_draw_arc_dsc_init(lv_draw_arc_dsc_t * dsc)
lv_draw_arc_dsc_t * lv_draw_task_get_arc_dsc(lv_draw_task_t * task)
void lv_draw_arc(lv_layer_t * layer, const lv_draw_arc_dsc_t * dsc)
void lv_draw_arc_get_area(int32_t x, int32_t y, uint16_t radius, lv_value_precise_t start_angle, lv_value_precise_t end_angle, int32_t w, bool rounded, lv_area_t * area)

// ../../lvgl/src/draw/lv_draw_label.h
void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
lv_draw_label_dsc_t * lv_draw_task_get_label_dsc(lv_draw_task_t * task)
void lv_draw_glyph_dsc_init(lv_draw_glyph_dsc_t * dsc)
void lv_draw_label(lv_layer_t * layer, const lv_draw_label_dsc_t * dsc, const lv_area_t * coords)
void lv_draw_character(lv_layer_t * layer, lv_draw_label_dsc_t * dsc, const lv_point_t * point, uint32_t unicode_letter)
void lv_draw_label_iterate_characters(lv_draw_unit_t * draw_unit, const lv_draw_label_dsc_t * dsc, const lv_area_t * coords, lv_draw_glyph_cb_t cb)

// ../../lvgl/src/draw/lv_draw_line.h
void lv_draw_line_dsc_init(lv_draw_line_dsc_t * dsc)
lv_draw_line_dsc_t * lv_draw_task_get_line_dsc(lv_draw_task_t * task)
void lv_draw_line(lv_layer_t * layer, const lv_draw_line_dsc_t * dsc)

// ../../lvgl/src/draw/lv_draw_mask.h
void lv_draw_mask_rect_dsc_init(lv_draw_mask_rect_dsc_t * dsc)
lv_draw_mask_rect_dsc_t * lv_draw_task_get_mask_rect_dsc(lv_draw_task_t * task)
void lv_draw_mask_rect(lv_layer_t * layer, const lv_draw_mask_rect_dsc_t * dsc)

// ../../lvgl/src/draw/lv_draw_rect.h
void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
void lv_draw_fill_dsc_init(lv_draw_fill_dsc_t * dsc)
lv_draw_fill_dsc_t * lv_draw_task_get_fill_dsc(lv_draw_task_t * task)
void lv_draw_border_dsc_init(lv_draw_border_dsc_t * dsc)
lv_draw_border_dsc_t * lv_draw_task_get_border_dsc(lv_draw_task_t * task)
void lv_draw_box_shadow_dsc_init(lv_draw_box_shadow_dsc_t * dsc)
lv_draw_box_shadow_dsc_t * lv_draw_task_get_box_shadow_dsc(lv_draw_task_t * task)
void lv_draw_rect(lv_layer_t * layer, const lv_draw_rect_dsc_t * dsc, const lv_area_t * coords)

// ../../lvgl/src/draw/lv_draw_triangle.h
void lv_draw_triangle_dsc_init(lv_draw_triangle_dsc_t * draw_dsc)
lv_draw_triangle_dsc_t * lv_draw_task_get_triangle_dsc(lv_draw_task_t * task)
void lv_draw_triangle(lv_layer_t * layer, const lv_draw_triangle_dsc_t * draw_dsc)

// ../../lvgl/src/font/lv_font.h
const void * lv_font_get_glyph_bitmap(lv_font_glyph_dsc_t * g_dsc, uint32_t letter, lv_draw_buf_t * draw_buf)
bool lv_font_get_glyph_dsc(const lv_font_t * font, lv_font_glyph_dsc_t * dsc_out, uint32_t letter, uint32_t letter_next)
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
static inline int32_t lv_font_get_line_height(const lv_font_t * font)
void lv_font_set_kerning(lv_font_t * font, lv_font_kerning_t kerning)

// ../../lvgl/src/indev/lv_indev.h
lv_indev_t * lv_indev_create(void)
void lv_indev_delete(lv_indev_t * indev)
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
void lv_indev_read(lv_indev_t * indev)
void lv_indev_read_timer_cb(lv_timer_t * timer)
void lv_indev_enable(lv_indev_t * indev, bool enable)
lv_indev_t * lv_indev_active(void)
void lv_indev_set_type(lv_indev_t * indev, lv_indev_type_t indev_type)
void lv_indev_set_read_cb(lv_indev_t * indev, lv_indev_read_cb_t read_cb)
void lv_indev_set_user_data(lv_indev_t * indev, void * user_data)
void lv_indev_set_driver_data(lv_indev_t * indev, void * driver_data)
void lv_indev_set_display(lv_indev_t * indev, struct _lv_display_t * disp)
lv_indev_type_t lv_indev_get_type(const lv_indev_t * indev)
lv_indev_read_cb_t lv_indev_get_read_cb(lv_indev_t * indev)
lv_indev_state_t lv_indev_get_state(const lv_indev_t * indev)
lv_group_t * lv_indev_get_group(const lv_indev_t * indev)
lv_display_t * lv_indev_get_display(const lv_indev_t * indev)
void * lv_indev_get_user_data(const lv_indev_t * indev)
void * lv_indev_get_driver_data(const lv_indev_t * indev)
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
void lv_indev_reset_long_press(lv_indev_t * indev)
void lv_indev_set_cursor(lv_indev_t * indev, lv_obj_t * cur_obj)
void lv_indev_set_group(lv_indev_t * indev, lv_group_t * group)
void lv_indev_set_button_points(lv_indev_t * indev, const lv_point_t points[])
void lv_indev_get_point(const lv_indev_t * indev, lv_point_t * point)
lv_dir_t lv_indev_get_gesture_dir(const lv_indev_t * indev)
uint32_t lv_indev_get_key(const lv_indev_t * indev)
lv_dir_t lv_indev_get_scroll_dir(const lv_indev_t * indev)
lv_obj_t * lv_indev_get_scroll_obj(const lv_indev_t * indev)
void lv_indev_get_vect(const lv_indev_t * indev, lv_point_t * point)
void lv_indev_wait_release(lv_indev_t * indev)
lv_obj_t * lv_indev_get_active_obj(void)
lv_timer_t * lv_indev_get_read_timer(lv_indev_t * indev)
void lv_indev_set_mode(lv_indev_t * indev, lv_indev_mode_t mode)
lv_indev_mode_t lv_indev_get_mode(lv_indev_t * indev)
lv_obj_t * lv_indev_search_obj(lv_obj_t * obj, lv_point_t * point)
void lv_indev_add_event_cb(lv_indev_t * indev, lv_event_cb_t event_cb, lv_event_code_t filter, void * user_data)
uint32_t lv_indev_get_event_count(lv_indev_t * indev)
lv_event_dsc_t * lv_indev_get_event_dsc(lv_indev_t * indev, uint32_t index)
bool lv_indev_remove_event(lv_indev_t * indev, uint32_t index)
uint32_t lv_indev_remove_event_cb_with_user_data(lv_indev_t * indev, lv_event_cb_t event_cb, void * user_data)
lv_result_t lv_indev_send_event(lv_indev_t * indev, lv_event_code_t code, void * param)

// ../../lvgl/src/layouts/flex/lv_flex.h
void lv_flex_init(void)
void lv_obj_set_flex_flow(lv_obj_t * obj, lv_flex_flow_t flow)
void lv_obj_set_flex_align(lv_obj_t * obj, lv_flex_align_t main_place, lv_flex_align_t cross_place, lv_flex_align_t track_cross_place)
void lv_obj_set_flex_grow(lv_obj_t * obj, uint8_t grow)

// ../../lvgl/src/layouts/grid/lv_grid.h
void lv_grid_init(void)
void lv_obj_set_grid_dsc_array(lv_obj_t * obj, const int32_t col_dsc[], const int32_t row_dsc[])
void lv_obj_set_grid_align(lv_obj_t * obj, lv_grid_align_t column_align, lv_grid_align_t row_align)
void lv_obj_set_grid_cell(lv_obj_t * obj, lv_grid_align_t column_align, int32_t col_pos, int32_t col_span, lv_grid_align_t row_align, int32_t row_pos, int32_t row_span)
static inline int32_t lv_grid_fr(uint8_t x)

// ../../lvgl/src/libs/qrcode/lv_qrcode.h
lv_obj_t * lv_qrcode_create(lv_obj_t * parent)
void lv_qrcode_set_size(lv_obj_t * obj, int32_t size)
void lv_qrcode_set_dark_color(lv_obj_t * obj, lv_color_t color)
void lv_qrcode_set_light_color(lv_obj_t * obj, lv_color_t color)
lv_result_t lv_qrcode_update(lv_obj_t * obj, const void * data, uint32_t data_len)

// ../../lvgl/src/lv_api_map_v8.h
static inline uint32_t lv_task_handler(void)
static inline void lv_obj_move_foreground(lv_obj_t * obj)
static inline void lv_obj_move_background(lv_obj_t * obj)

// ../../lvgl/src/lv_api_map_v9_0.h

// ../../lvgl/src/misc/lv_anim.h
void lv_anim_init(lv_anim_t * a)
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
static inline void lv_anim_set_duration(lv_anim_t * a, uint32_t duration)
static inline void lv_anim_set_time(lv_anim_t * a, uint32_t duration)
static inline void lv_anim_set_delay(lv_anim_t * a, uint32_t delay)
static inline void lv_anim_set_values(lv_anim_t * a, int32_t start, int32_t end)
static inline void lv_anim_set_custom_exec_cb(lv_anim_t * a, lv_anim_custom_exec_cb_t exec_cb)
static inline void lv_anim_set_path_cb(lv_anim_t * a, lv_anim_path_cb_t path_cb)
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_start_cb_t start_cb)
static inline void lv_anim_set_get_value_cb(lv_anim_t * a, lv_anim_get_value_cb_t get_value_cb)
static inline void lv_anim_set_completed_cb(lv_anim_t * a, lv_anim_completed_cb_t completed_cb)
static inline void lv_anim_set_deleted_cb(lv_anim_t * a, lv_anim_deleted_cb_t deleted_cb)
static inline void lv_anim_set_playback_duration(lv_anim_t * a, uint32_t duration)
static inline void lv_anim_set_playback_time(lv_anim_t * a, uint32_t duration)
static inline void lv_anim_set_playback_delay(lv_anim_t * a, uint32_t delay)
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint32_t delay)
static inline void lv_anim_set_early_apply(lv_anim_t * a, bool en)
static inline void lv_anim_set_user_data(lv_anim_t * a, void * user_data)
static inline void lv_anim_set_bezier3_param(lv_anim_t * a, int16_t x1, int16_t y1, int16_t x2, int16_t y2)
lv_anim_t * lv_anim_start(const lv_anim_t * a)
static inline uint32_t lv_anim_get_delay(const lv_anim_t * a)
uint32_t lv_anim_get_playtime(const lv_anim_t * a)
static inline uint32_t lv_anim_get_time(const lv_anim_t * a)
static inline uint16_t lv_anim_get_repeat_count(const lv_anim_t * a)
static inline void * lv_anim_get_user_data(const lv_anim_t * a)
bool lv_anim_delete(void * var, lv_anim_exec_xcb_t exec_cb)
void lv_anim_delete_all(void)
lv_anim_t * lv_anim_get(void * var, lv_anim_exec_xcb_t exec_cb)
lv_timer_t * lv_anim_get_timer(void)
static inline bool lv_anim_custom_delete(lv_anim_t * a, lv_anim_custom_exec_cb_t exec_cb)
static inline lv_anim_t * lv_anim_custom_get(lv_anim_t * a, lv_anim_custom_exec_cb_t exec_cb)
uint16_t lv_anim_count_running(void)
uint32_t lv_anim_speed(uint32_t speed)
uint32_t lv_anim_speed_clamped(uint32_t speed, uint32_t min_time, uint32_t max_time)
void lv_anim_refr_now(void)

// ../../lvgl/src/misc/lv_area.h
void lv_area_set(lv_area_t * area_p, int32_t x1, int32_t y1, int32_t x2, int32_t y2)
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
static inline int32_t lv_area_get_width(const lv_area_t * area_p)
static inline int32_t lv_area_get_height(const lv_area_t * area_p)
void lv_area_set_width(lv_area_t * area_p, int32_t w)
void lv_area_set_height(lv_area_t * area_p, int32_t h)
uint32_t lv_area_get_size(const lv_area_t * area_p)
void lv_area_increase(lv_area_t * area, int32_t w_extra, int32_t h_extra)
void lv_area_move(lv_area_t * area, int32_t x_ofs, int32_t y_ofs)
void lv_area_align(const lv_area_t * base, lv_area_t * to_align, lv_align_t align, int32_t ofs_x, int32_t ofs_y)
void lv_point_transform(lv_point_t * point, int32_t angle, int32_t scale_x, int32_t scale_y, const lv_point_t * pivot, bool zoom_first)
void lv_point_array_transform(lv_point_t * points, size_t count, int32_t angle, int32_t scale_x, int32_t scale_y, const lv_point_t * pivot, bool zoom_first)
static inline lv_point_t lv_point_from_precise(const lv_point_precise_t * p)
static inline lv_point_precise_t lv_point_to_precise(const lv_point_t * p)
static inline void lv_point_set(lv_point_t * p, int32_t x, int32_t y)
static inline void lv_point_precise_set(lv_point_precise_t * p, lv_value_precise_t x, lv_value_precise_t y)
static inline void lv_point_swap(lv_point_t * p1, lv_point_t * p2)
static inline void lv_point_precise_swap(lv_point_precise_t * p1, lv_point_precise_t * p2)
static inline int32_t lv_pct(int32_t x)
static inline int32_t lv_pct_to_px(int32_t v, int32_t base)

// ../../lvgl/src/misc/lv_color.h
uint8_t lv_color_format_get_bpp(lv_color_format_t cf)
static inline uint8_t lv_color_format_get_size(lv_color_format_t cf)
bool lv_color_format_has_alpha(lv_color_format_t src_cf)
lv_color32_t lv_color_to_32(lv_color_t color, lv_opa_t opa)
static inline uint32_t lv_color_to_int(lv_color_t c)
static inline bool lv_color_eq(lv_color_t c1, lv_color_t c2)
static inline bool lv_color32_eq(lv_color32_t c1, lv_color32_t c2)
static inline lv_color_t lv_color_hex(uint32_t c)
static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
static inline lv_color32_t lv_color32_make(uint8_t r, uint8_t g, uint8_t b, uint8_t a)
static inline lv_color_t lv_color_hex3(uint32_t c)
uint16_t lv_color_to_u16(lv_color_t color)
uint32_t lv_color_to_u32(lv_color_t color)
static inline uint16_t lv_color_16_16_mix(uint16_t c1, uint16_t c2, uint8_t mix)
lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
lv_color_t lv_color_hsv_to_rgb(uint16_t h, uint8_t s, uint8_t v)
lv_color_hsv_t lv_color_rgb_to_hsv(uint8_t r8, uint8_t g8, uint8_t b8)
lv_color_hsv_t lv_color_to_hsv(lv_color_t color)
static inline lv_color_t lv_color_white(void)
static inline lv_color_t lv_color_black(void)
static inline void lv_color_premultiply(lv_color32_t * c)
static inline void lv_color16_premultiply(lv_color16_t * c, lv_opa_t a)

// ../../lvgl/src/misc/lv_color_op.h
static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
static inline lv_color32_t lv_color_mix32(lv_color32_t fg, lv_color32_t bg)
static inline uint8_t lv_color_brightness(lv_color_t c)
static inline void lv_color_filter_dsc_init(lv_color_filter_dsc_t * dsc, lv_color_filter_cb_t cb)

// ../../lvgl/src/misc/lv_event.h
lv_result_t lv_event_send(lv_event_list_t * list, lv_event_t * e, bool preprocess)
lv_event_dsc_t * lv_event_add(lv_event_list_t * list, lv_event_cb_t cb, lv_event_code_t filter, void * user_data)
bool lv_event_remove_dsc(lv_event_list_t * list, lv_event_dsc_t * dsc)
uint32_t lv_event_get_count(lv_event_list_t * list)
lv_event_dsc_t * lv_event_get_dsc(lv_event_list_t * list, uint32_t index)
lv_event_cb_t lv_event_dsc_get_cb(lv_event_dsc_t * dsc)
void * lv_event_dsc_get_user_data(lv_event_dsc_t * dsc)
bool lv_event_remove(lv_event_list_t * list, uint32_t index)
void lv_event_remove_all(lv_event_list_t * list)
void * lv_event_get_target(lv_event_t * e)
void * lv_event_get_current_target(lv_event_t * e)
lv_event_code_t lv_event_get_code(lv_event_t * e)
void * lv_event_get_param(lv_event_t * e)
void * lv_event_get_user_data(lv_event_t * e)
void lv_event_stop_bubbling(lv_event_t * e)
void lv_event_stop_processing(lv_event_t * e)
uint32_t lv_event_register_id(void)

// ../../lvgl/src/misc/lv_palette.h
lv_color_t lv_palette_main(lv_palette_t p)
lv_color_t lv_palette_lighten(lv_palette_t p, uint8_t lvl)
lv_color_t lv_palette_darken(lv_palette_t p, uint8_t lvl)

// ../../lvgl/src/misc/lv_style.h
void lv_style_init(lv_style_t * style)
void lv_style_reset(lv_style_t * style)
static inline bool lv_style_is_const(const lv_style_t * style)
lv_style_prop_t lv_style_register_prop(uint8_t flag)
lv_style_prop_t lv_style_get_num_custom_props(void)
bool lv_style_remove_prop(lv_style_t * style, lv_style_prop_t prop)
void lv_style_set_prop(lv_style_t * style, lv_style_prop_t prop, lv_style_value_t value)
lv_style_res_t lv_style_get_prop(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
void lv_style_transition_dsc_init(lv_style_transition_dsc_t * tr, const lv_style_prop_t props[], lv_anim_path_cb_t path_cb, uint32_t time, uint32_t delay, void * user_data)
lv_style_value_t lv_style_prop_get_default(lv_style_prop_t prop)
static inline lv_style_res_t lv_style_get_prop_inlined(const lv_style_t * style, lv_style_prop_t prop, lv_style_value_t * value)
bool lv_style_is_empty(const lv_style_t * style)
static inline void lv_style_set_size(lv_style_t * style, int32_t width, int32_t height)
static inline void lv_style_set_pad_all(lv_style_t * style, int32_t value)
static inline void lv_style_set_pad_hor(lv_style_t * style, int32_t value)
static inline void lv_style_set_pad_ver(lv_style_t * style, int32_t value)
static inline void lv_style_set_pad_gap(lv_style_t * style, int32_t value)
static inline void lv_style_set_transform_scale(lv_style_t * style, int32_t value)
static inline bool lv_style_prop_has_flag(lv_style_prop_t prop, uint8_t flag)

// ../../lvgl/src/misc/lv_style_gen.h
void lv_style_set_width(lv_style_t * style, int32_t value)
void lv_style_set_min_width(lv_style_t * style, int32_t value)
void lv_style_set_max_width(lv_style_t * style, int32_t value)
void lv_style_set_height(lv_style_t * style, int32_t value)
void lv_style_set_min_height(lv_style_t * style, int32_t value)
void lv_style_set_max_height(lv_style_t * style, int32_t value)
void lv_style_set_length(lv_style_t * style, int32_t value)
void lv_style_set_x(lv_style_t * style, int32_t value)
void lv_style_set_y(lv_style_t * style, int32_t value)
void lv_style_set_align(lv_style_t * style, lv_align_t value)
void lv_style_set_transform_width(lv_style_t * style, int32_t value)
void lv_style_set_transform_height(lv_style_t * style, int32_t value)
void lv_style_set_translate_x(lv_style_t * style, int32_t value)
void lv_style_set_translate_y(lv_style_t * style, int32_t value)
void lv_style_set_transform_scale_x(lv_style_t * style, int32_t value)
void lv_style_set_transform_scale_y(lv_style_t * style, int32_t value)
void lv_style_set_transform_rotation(lv_style_t * style, int32_t value)
void lv_style_set_transform_pivot_x(lv_style_t * style, int32_t value)
void lv_style_set_transform_pivot_y(lv_style_t * style, int32_t value)
void lv_style_set_transform_skew_x(lv_style_t * style, int32_t value)
void lv_style_set_transform_skew_y(lv_style_t * style, int32_t value)
void lv_style_set_pad_top(lv_style_t * style, int32_t value)
void lv_style_set_pad_bottom(lv_style_t * style, int32_t value)
void lv_style_set_pad_left(lv_style_t * style, int32_t value)
void lv_style_set_pad_right(lv_style_t * style, int32_t value)
void lv_style_set_pad_row(lv_style_t * style, int32_t value)
void lv_style_set_pad_column(lv_style_t * style, int32_t value)
void lv_style_set_margin_top(lv_style_t * style, int32_t value)
void lv_style_set_margin_bottom(lv_style_t * style, int32_t value)
void lv_style_set_margin_left(lv_style_t * style, int32_t value)
void lv_style_set_margin_right(lv_style_t * style, int32_t value)
void lv_style_set_bg_color(lv_style_t * style, lv_color_t value)
void lv_style_set_bg_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_bg_grad_color(lv_style_t * style, lv_color_t value)
void lv_style_set_bg_grad_dir(lv_style_t * style, lv_grad_dir_t value)
void lv_style_set_bg_main_stop(lv_style_t * style, int32_t value)
void lv_style_set_bg_grad_stop(lv_style_t * style, int32_t value)
void lv_style_set_bg_main_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_bg_grad_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_bg_grad(lv_style_t * style, const lv_grad_dsc_t * value)
void lv_style_set_bg_image_src(lv_style_t * style, const void * value)
void lv_style_set_bg_image_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_bg_image_recolor(lv_style_t * style, lv_color_t value)
void lv_style_set_bg_image_recolor_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_bg_image_tiled(lv_style_t * style, bool value)
void lv_style_set_border_color(lv_style_t * style, lv_color_t value)
void lv_style_set_border_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_border_width(lv_style_t * style, int32_t value)
void lv_style_set_border_side(lv_style_t * style, lv_border_side_t value)
void lv_style_set_border_post(lv_style_t * style, bool value)
void lv_style_set_outline_width(lv_style_t * style, int32_t value)
void lv_style_set_outline_color(lv_style_t * style, lv_color_t value)
void lv_style_set_outline_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_outline_pad(lv_style_t * style, int32_t value)
void lv_style_set_shadow_width(lv_style_t * style, int32_t value)
void lv_style_set_shadow_offset_x(lv_style_t * style, int32_t value)
void lv_style_set_shadow_offset_y(lv_style_t * style, int32_t value)
void lv_style_set_shadow_spread(lv_style_t * style, int32_t value)
void lv_style_set_shadow_color(lv_style_t * style, lv_color_t value)
void lv_style_set_shadow_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_image_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_image_recolor(lv_style_t * style, lv_color_t value)
void lv_style_set_image_recolor_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_line_width(lv_style_t * style, int32_t value)
void lv_style_set_line_dash_width(lv_style_t * style, int32_t value)
void lv_style_set_line_dash_gap(lv_style_t * style, int32_t value)
void lv_style_set_line_rounded(lv_style_t * style, bool value)
void lv_style_set_line_color(lv_style_t * style, lv_color_t value)
void lv_style_set_line_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_arc_width(lv_style_t * style, int32_t value)
void lv_style_set_arc_rounded(lv_style_t * style, bool value)
void lv_style_set_arc_color(lv_style_t * style, lv_color_t value)
void lv_style_set_arc_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_arc_image_src(lv_style_t * style, const void * value)
void lv_style_set_text_color(lv_style_t * style, lv_color_t value)
void lv_style_set_text_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_text_font(lv_style_t * style, const lv_font_t * value)
void lv_style_set_text_letter_space(lv_style_t * style, int32_t value)
void lv_style_set_text_line_space(lv_style_t * style, int32_t value)
void lv_style_set_text_decor(lv_style_t * style, lv_text_decor_t value)
void lv_style_set_text_align(lv_style_t * style, lv_text_align_t value)
void lv_style_set_radius(lv_style_t * style, int32_t value)
void lv_style_set_clip_corner(lv_style_t * style, bool value)
void lv_style_set_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_opa_layered(lv_style_t * style, lv_opa_t value)
void lv_style_set_color_filter_dsc(lv_style_t * style, const lv_color_filter_dsc_t * value)
void lv_style_set_color_filter_opa(lv_style_t * style, lv_opa_t value)
void lv_style_set_anim(lv_style_t * style, const lv_anim_t * value)
void lv_style_set_anim_duration(lv_style_t * style, uint32_t value)
void lv_style_set_transition(lv_style_t * style, const lv_style_transition_dsc_t * value)
void lv_style_set_blend_mode(lv_style_t * style, lv_blend_mode_t value)
void lv_style_set_layout(lv_style_t * style, uint16_t value)
void lv_style_set_base_dir(lv_style_t * style, lv_base_dir_t value)
void lv_style_set_bitmap_mask_src(lv_style_t * style, const lv_image_dsc_t * value)
void lv_style_set_rotary_sensitivity(lv_style_t * style, uint32_t value)
void lv_style_set_flex_flow(lv_style_t * style, lv_flex_flow_t value)
void lv_style_set_flex_main_place(lv_style_t * style, lv_flex_align_t value)
void lv_style_set_flex_cross_place(lv_style_t * style, lv_flex_align_t value)
void lv_style_set_flex_track_place(lv_style_t * style, lv_flex_align_t value)
void lv_style_set_flex_grow(lv_style_t * style, uint8_t value)
void lv_style_set_grid_column_dsc_array(lv_style_t * style, const int32_t * value)
void lv_style_set_grid_column_align(lv_style_t * style, lv_grid_align_t value)
void lv_style_set_grid_row_dsc_array(lv_style_t * style, const int32_t * value)
void lv_style_set_grid_row_align(lv_style_t * style, lv_grid_align_t value)
void lv_style_set_grid_cell_column_pos(lv_style_t * style, int32_t value)
void lv_style_set_grid_cell_x_align(lv_style_t * style, lv_grid_align_t value)
void lv_style_set_grid_cell_column_span(lv_style_t * style, int32_t value)
void lv_style_set_grid_cell_row_pos(lv_style_t * style, int32_t value)
void lv_style_set_grid_cell_y_align(lv_style_t * style, lv_grid_align_t value)
void lv_style_set_grid_cell_row_span(lv_style_t * style, int32_t value)

// ../../lvgl/src/misc/lv_text.h
void lv_text_get_size(lv_point_t * size_res, const char * text, const lv_font_t * font, int32_t letter_space, int32_t line_space, int32_t max_width, lv_text_flag_t flag)
int32_t lv_text_get_width(const char * txt, uint32_t length, const lv_font_t * font, int32_t letter_space)
char * _lv_text_set_text_vfmt(const char * fmt, va_list ap) LV_FORMAT_ATTRIBUTE(1, 0)
uint8_t (*_lv_text_encoded_size)(const char *)
uint32_t (*_lv_text_unicode_to_encoded)(uint32_t)
uint32_t (*_lv_text_encoded_conv_wc)(uint32_t c)
uint32_t (*_lv_text_encoded_next)(const char *, uint32_t *)
uint32_t (*_lv_text_encoded_prev)(const char *, uint32_t *)
uint32_t (*_lv_text_encoded_get_byte_id)(const char *, uint32_t)
uint32_t (*_lv_text_encoded_get_char_id)(const char *, uint32_t)
uint32_t (*_lv_text_get_encoded_length)(const char *)

// ../../lvgl/src/misc/lv_timer.h
uint32_t lv_timer_handler(void)
static inline uint32_t lv_timer_handler_run_in_period(uint32_t period)
void lv_timer_periodic_handler(void)
void lv_timer_handler_set_resume_cb(lv_timer_handler_resume_cb_t cb, void * data)
lv_timer_t * lv_timer_create_basic(void)
lv_timer_t * lv_timer_create(lv_timer_cb_t timer_xcb, uint32_t period, void * user_data)
void lv_timer_delete(lv_timer_t * timer)
void lv_timer_pause(lv_timer_t * timer)
void lv_timer_resume(lv_timer_t * timer)
void lv_timer_set_cb(lv_timer_t * timer, lv_timer_cb_t timer_cb)
void lv_timer_set_period(lv_timer_t * timer, uint32_t period)
void lv_timer_ready(lv_timer_t * timer)
void lv_timer_set_repeat_count(lv_timer_t * timer, int32_t repeat_count)
void lv_timer_set_auto_delete(lv_timer_t * timer, bool auto_delete)
void lv_timer_set_user_data(lv_timer_t * timer, void * user_data)
void lv_timer_reset(lv_timer_t * timer)
void lv_timer_enable(bool en)
uint32_t lv_timer_get_idle(void)
uint32_t lv_timer_get_time_until_next(void)
lv_timer_t * lv_timer_get_next(lv_timer_t * timer)
static inline void * lv_timer_get_user_data(lv_timer_t * timer)
static inline bool lv_timer_get_paused(lv_timer_t * timer)

// ../../lvgl/src/themes/lv_theme.h
lv_theme_t * lv_theme_get_from_obj(lv_obj_t * obj)
void lv_theme_apply(lv_obj_t * obj)
void lv_theme_set_parent(lv_theme_t * new_theme, lv_theme_t * parent)
void lv_theme_set_apply_cb(lv_theme_t * theme, lv_theme_apply_cb_t apply_cb)
const lv_font_t * lv_theme_get_font_small(lv_obj_t * obj)
const lv_font_t * lv_theme_get_font_normal(lv_obj_t * obj)
const lv_font_t * lv_theme_get_font_large(lv_obj_t * obj)
lv_color_t lv_theme_get_color_primary(lv_obj_t * obj)
lv_color_t lv_theme_get_color_secondary(lv_obj_t * obj)

// ../../lvgl/src/widgets/animimage/lv_animimage.h
lv_obj_t * lv_animimg_create(lv_obj_t * parent)
void lv_animimg_set_src(lv_obj_t * img, const void * dsc[], size_t num)
void lv_animimg_start(lv_obj_t * obj)
void lv_animimg_set_duration(lv_obj_t * img, uint32_t duration)
void lv_animimg_set_repeat_count(lv_obj_t * img, uint32_t count)
const void ** lv_animimg_get_src(lv_obj_t * img)
uint8_t lv_animimg_get_src_count(lv_obj_t * img)
uint32_t lv_animimg_get_duration(lv_obj_t * img)
uint32_t lv_animimg_get_repeat_count(lv_obj_t * img)

// ../../lvgl/src/widgets/arc/lv_arc.h
lv_obj_t * lv_arc_create(lv_obj_t * parent)
void lv_arc_set_start_angle(lv_obj_t * obj, lv_value_precise_t start)
void lv_arc_set_end_angle(lv_obj_t * obj, lv_value_precise_t end)
void lv_arc_set_angles(lv_obj_t * obj, lv_value_precise_t start, lv_value_precise_t end)
void lv_arc_set_bg_start_angle(lv_obj_t * obj, lv_value_precise_t start)
void lv_arc_set_bg_end_angle(lv_obj_t * obj, lv_value_precise_t end)
void lv_arc_set_bg_angles(lv_obj_t * obj, lv_value_precise_t start, lv_value_precise_t end)
void lv_arc_set_rotation(lv_obj_t * obj, int32_t rotation)
void lv_arc_set_mode(lv_obj_t * obj, lv_arc_mode_t type)
void lv_arc_set_value(lv_obj_t * obj, int32_t value)
void lv_arc_set_range(lv_obj_t * obj, int32_t min, int32_t max)
void lv_arc_set_change_rate(lv_obj_t * obj, uint32_t rate)
void lv_arc_set_knob_offset(lv_obj_t * obj, int32_t offset)
lv_value_precise_t lv_arc_get_angle_start(lv_obj_t * obj)
lv_value_precise_t lv_arc_get_angle_end(lv_obj_t * obj)
lv_value_precise_t lv_arc_get_bg_angle_start(lv_obj_t * obj)
lv_value_precise_t lv_arc_get_bg_angle_end(lv_obj_t * obj)
int32_t lv_arc_get_value(const lv_obj_t * obj)
int32_t lv_arc_get_min_value(const lv_obj_t * obj)
int32_t lv_arc_get_max_value(const lv_obj_t * obj)
lv_arc_mode_t lv_arc_get_mode(const lv_obj_t * obj)
int32_t lv_arc_get_rotation(const lv_obj_t * obj)
int32_t lv_arc_get_knob_offset(const lv_obj_t * obj)
void lv_arc_align_obj_to_angle(const lv_obj_t * obj, lv_obj_t * obj_to_align, int32_t r_offset)
void lv_arc_rotate_obj_to_angle(const lv_obj_t * obj, lv_obj_t * obj_to_rotate, int32_t r_offset)

// ../../lvgl/src/widgets/bar/lv_bar.h
lv_obj_t * lv_bar_create(lv_obj_t * parent)
void lv_bar_set_value(lv_obj_t * obj, int32_t value, lv_anim_enable_t anim)
void lv_bar_set_start_value(lv_obj_t * obj, int32_t start_value, lv_anim_enable_t anim)
void lv_bar_set_range(lv_obj_t * obj, int32_t min, int32_t max)
void lv_bar_set_mode(lv_obj_t * obj, lv_bar_mode_t mode)
int32_t lv_bar_get_value(const lv_obj_t * obj)
int32_t lv_bar_get_start_value(const lv_obj_t * obj)
int32_t lv_bar_get_min_value(const lv_obj_t * obj)
int32_t lv_bar_get_max_value(const lv_obj_t * obj)
lv_bar_mode_t lv_bar_get_mode(lv_obj_t * obj)
bool lv_bar_is_symmetrical(lv_obj_t * obj)

// ../../lvgl/src/widgets/button/lv_button.h
lv_obj_t * lv_button_create(lv_obj_t * parent)

// ../../lvgl/src/widgets/buttonmatrix/lv_buttonmatrix.h
lv_obj_t * lv_buttonmatrix_create(lv_obj_t * parent)
void lv_buttonmatrix_set_map(lv_obj_t * obj, const char * map[])
void lv_buttonmatrix_set_ctrl_map(lv_obj_t * obj, const lv_buttonmatrix_ctrl_t ctrl_map[])
void lv_buttonmatrix_set_selected_button(lv_obj_t * obj, uint32_t btn_id)
void lv_buttonmatrix_set_button_ctrl(lv_obj_t * obj, uint32_t btn_id, lv_buttonmatrix_ctrl_t ctrl)
void lv_buttonmatrix_clear_button_ctrl(lv_obj_t * obj, uint32_t btn_id, lv_buttonmatrix_ctrl_t ctrl)
void lv_buttonmatrix_set_button_ctrl_all(lv_obj_t * obj, lv_buttonmatrix_ctrl_t ctrl)
void lv_buttonmatrix_clear_button_ctrl_all(lv_obj_t * obj, lv_buttonmatrix_ctrl_t ctrl)
void lv_buttonmatrix_set_button_width(lv_obj_t * obj, uint32_t btn_id, uint32_t width)
void lv_buttonmatrix_set_one_checked(lv_obj_t * obj, bool en)
const char ** lv_buttonmatrix_get_map(const lv_obj_t * obj)
uint32_t lv_buttonmatrix_get_selected_button(const lv_obj_t * obj)
const char * lv_buttonmatrix_get_button_text(const lv_obj_t * obj, uint32_t btn_id)
bool lv_buttonmatrix_has_button_ctrl(lv_obj_t * obj, uint32_t btn_id, lv_buttonmatrix_ctrl_t ctrl)
bool lv_buttonmatrix_get_one_checked(const lv_obj_t * obj)

// ../../lvgl/src/widgets/calendar/lv_calendar.h
lv_obj_t * lv_calendar_create(lv_obj_t * parent)
void lv_calendar_set_today_date(lv_obj_t * obj, uint32_t year, uint32_t month, uint32_t day)
void lv_calendar_set_showed_date(lv_obj_t * obj, uint32_t year, uint32_t month)
void lv_calendar_set_highlighted_dates(lv_obj_t * obj, lv_calendar_date_t highlighted[], size_t date_num)
void lv_calendar_set_day_names(lv_obj_t * obj, const char ** day_names)
lv_obj_t * lv_calendar_get_btnmatrix(const lv_obj_t * obj)
const lv_calendar_date_t * lv_calendar_get_today_date(const lv_obj_t * calendar)
const lv_calendar_date_t * lv_calendar_get_showed_date(const lv_obj_t * calendar)
lv_calendar_date_t * lv_calendar_get_highlighted_dates(const lv_obj_t * calendar)
size_t lv_calendar_get_highlighted_dates_num(const lv_obj_t * calendar)
lv_result_t lv_calendar_get_pressed_date(const lv_obj_t * calendar, lv_calendar_date_t * date)

// ../../lvgl/src/widgets/calendar/lv_calendar_header_arrow.h
lv_obj_t * lv_calendar_header_arrow_create(lv_obj_t * parent)

// ../../lvgl/src/widgets/calendar/lv_calendar_header_dropdown.h
lv_obj_t * lv_calendar_header_dropdown_create(lv_obj_t * parent)
void lv_calendar_header_dropdown_set_year_list(lv_obj_t * parent, const char * years_list)

// ../../lvgl/src/widgets/canvas/lv_canvas.h
lv_obj_t * lv_canvas_create(lv_obj_t * parent)
void lv_canvas_set_buffer(lv_obj_t * obj, void * buf, int32_t w, int32_t h, lv_color_format_t cf)
void lv_canvas_set_draw_buf(lv_obj_t * obj, lv_draw_buf_t * draw_buf)
void lv_canvas_set_px(lv_obj_t * obj, int32_t x, int32_t y, lv_color_t color, lv_opa_t opa)
void lv_canvas_set_palette(lv_obj_t * obj, uint8_t index, lv_color32_t color)
lv_draw_buf_t * lv_canvas_get_draw_buf(lv_obj_t * obj)
lv_color32_t lv_canvas_get_px(lv_obj_t * obj, int32_t x, int32_t y)
lv_image_dsc_t * lv_canvas_get_image(lv_obj_t * canvas)
const void * lv_canvas_get_buf(lv_obj_t * canvas)
void lv_canvas_copy_buf(lv_obj_t * obj, const lv_area_t * canvas_area, lv_draw_buf_t * dest_buf, const lv_area_t * dest_area)
void lv_canvas_fill_bg(lv_obj_t * obj, lv_color_t color, lv_opa_t opa)
void lv_canvas_init_layer(lv_obj_t * canvas, lv_layer_t * layer)
void lv_canvas_finish_layer(lv_obj_t * canvas, lv_layer_t * layer)
static inline uint32_t lv_canvas_buf_size(int32_t w, int32_t h, uint8_t bpp, uint8_t stride)

// ../../lvgl/src/widgets/chart/lv_chart.h
lv_obj_t * lv_chart_create(lv_obj_t * parent)
void lv_chart_set_type(lv_obj_t * obj, lv_chart_type_t type)
void lv_chart_set_point_count(lv_obj_t * obj, uint32_t cnt)
void lv_chart_set_range(lv_obj_t * obj, lv_chart_axis_t axis, int32_t min, int32_t max)
void lv_chart_set_update_mode(lv_obj_t * obj, lv_chart_update_mode_t update_mode)
void lv_chart_set_div_line_count(lv_obj_t * obj, uint8_t hdiv, uint8_t vdiv)
lv_chart_type_t lv_chart_get_type(const lv_obj_t * obj)
uint32_t lv_chart_get_point_count(const lv_obj_t * obj)
uint32_t lv_chart_get_x_start_point(const lv_obj_t * obj, lv_chart_series_t * ser)
void lv_chart_get_point_pos_by_id(lv_obj_t * obj, lv_chart_series_t * ser, uint32_t id, lv_point_t * p_out)
void lv_chart_refresh(lv_obj_t * obj)
lv_chart_series_t * lv_chart_add_series(lv_obj_t * obj, lv_color_t color, lv_chart_axis_t axis)
void lv_chart_remove_series(lv_obj_t * obj, lv_chart_series_t * series)
void lv_chart_hide_series(lv_obj_t * chart, lv_chart_series_t * series, bool hide)
void lv_chart_set_series_color(lv_obj_t * chart, lv_chart_series_t * series, lv_color_t color)
void lv_chart_set_x_start_point(lv_obj_t * obj, lv_chart_series_t * ser, uint32_t id)
lv_chart_series_t * lv_chart_get_series_next(const lv_obj_t * chart, const lv_chart_series_t * ser)
lv_chart_cursor_t * lv_chart_add_cursor(lv_obj_t * obj, lv_color_t color, lv_dir_t dir)
void lv_chart_set_cursor_pos(lv_obj_t * chart, lv_chart_cursor_t * cursor, lv_point_t * pos)
void lv_chart_set_cursor_point(lv_obj_t * chart, lv_chart_cursor_t * cursor, lv_chart_series_t * ser, uint32_t point_id)
lv_point_t lv_chart_get_cursor_point(lv_obj_t * chart, lv_chart_cursor_t * cursor)
void lv_chart_set_all_value(lv_obj_t * obj, lv_chart_series_t * ser, int32_t value)
void lv_chart_set_next_value(lv_obj_t * obj, lv_chart_series_t * ser, int32_t value)
void lv_chart_set_next_value2(lv_obj_t * obj, lv_chart_series_t * ser, int32_t x_value, int32_t y_value)
void lv_chart_set_value_by_id(lv_obj_t * obj, lv_chart_series_t * ser, uint32_t id, int32_t value)
void lv_chart_set_value_by_id2(lv_obj_t * obj, lv_chart_series_t * ser, uint32_t id, int32_t x_value, int32_t y_value)
void lv_chart_set_ext_y_array(lv_obj_t * obj, lv_chart_series_t * ser, int32_t array[])
void lv_chart_set_ext_x_array(lv_obj_t * obj, lv_chart_series_t * ser, int32_t array[])
int32_t * lv_chart_get_y_array(const lv_obj_t * obj, lv_chart_series_t * ser)
int32_t * lv_chart_get_x_array(const lv_obj_t * obj, lv_chart_series_t * ser)
uint32_t lv_chart_get_pressed_point(const lv_obj_t * obj)
int32_t lv_chart_get_first_point_center_offset(lv_obj_t * obj)

// ../../lvgl/src/widgets/checkbox/lv_checkbox.h
lv_obj_t * lv_checkbox_create(lv_obj_t * parent)
void lv_checkbox_set_text(lv_obj_t * obj, const char * txt)
void lv_checkbox_set_text_static(lv_obj_t * obj, const char * txt)
const char * lv_checkbox_get_text(const lv_obj_t * obj)

// ../../lvgl/src/widgets/dropdown/lv_dropdown.h
lv_obj_t * lv_dropdown_create(lv_obj_t * parent)
void lv_dropdown_set_text(lv_obj_t * obj, const char * txt)
void lv_dropdown_set_options(lv_obj_t * obj, const char * options)
void lv_dropdown_set_options_static(lv_obj_t * obj, const char * options)
void lv_dropdown_add_option(lv_obj_t * obj, const char * option, uint32_t pos)
void lv_dropdown_clear_options(lv_obj_t * obj)
void lv_dropdown_set_selected(lv_obj_t * obj, uint32_t sel_opt)
void lv_dropdown_set_dir(lv_obj_t * obj, lv_dir_t dir)
void lv_dropdown_set_symbol(lv_obj_t * obj, const void * symbol)
void lv_dropdown_set_selected_highlight(lv_obj_t * obj, bool en)
lv_obj_t * lv_dropdown_get_list(lv_obj_t * obj)
const char * lv_dropdown_get_text(lv_obj_t * obj)
const char * lv_dropdown_get_options(const lv_obj_t * obj)
uint32_t lv_dropdown_get_selected(const lv_obj_t * obj)
uint32_t lv_dropdown_get_option_count(const lv_obj_t * obj)
void lv_dropdown_get_selected_str(const lv_obj_t * obj, char * buf, uint32_t buf_size)
int32_t lv_dropdown_get_option_index(lv_obj_t * obj, const char * option)
const char * lv_dropdown_get_symbol(lv_obj_t * obj)
bool lv_dropdown_get_selected_highlight(lv_obj_t * obj)
lv_dir_t lv_dropdown_get_dir(const lv_obj_t * obj)
void lv_dropdown_open(lv_obj_t * dropdown_obj)
void lv_dropdown_close(lv_obj_t * obj)
bool lv_dropdown_is_open(lv_obj_t * obj)

// ../../lvgl/src/widgets/image/lv_image.h
lv_obj_t * lv_image_create(lv_obj_t * parent)
void lv_image_set_src(lv_obj_t * obj, const void * src)
void lv_image_set_offset_x(lv_obj_t * obj, int32_t x)
void lv_image_set_offset_y(lv_obj_t * obj, int32_t y)
void lv_image_set_rotation(lv_obj_t * obj, int32_t angle)
void lv_image_set_pivot(lv_obj_t * obj, int32_t x, int32_t y)
void lv_image_set_scale(lv_obj_t * obj, uint32_t zoom)
void lv_image_set_scale_x(lv_obj_t * obj, uint32_t zoom)
void lv_image_set_scale_y(lv_obj_t * obj, uint32_t zoom)
void lv_image_set_blend_mode(lv_obj_t * obj, lv_blend_mode_t blend_mode)
void lv_image_set_antialias(lv_obj_t * obj, bool antialias)
void lv_image_set_inner_align(lv_obj_t * obj, lv_image_align_t align)
void lv_image_set_bitmap_map_src(lv_obj_t * obj, const lv_image_dsc_t * src)
const void * lv_image_get_src(lv_obj_t * obj)
int32_t lv_image_get_offset_x(lv_obj_t * obj)
int32_t lv_image_get_offset_y(lv_obj_t * obj)
int32_t lv_image_get_rotation(lv_obj_t * obj)
void lv_image_get_pivot(lv_obj_t * obj, lv_point_t * pivot)
int32_t lv_image_get_scale(lv_obj_t * obj)
int32_t lv_image_get_scale_x(lv_obj_t * obj)
int32_t lv_image_get_scale_y(lv_obj_t * obj)
lv_blend_mode_t lv_image_get_blend_mode(lv_obj_t * obj)
bool lv_image_get_antialias(lv_obj_t * obj)
lv_image_align_t lv_image_get_inner_align(lv_obj_t * obj)
const lv_image_dsc_t * lv_image_get_bitmap_map_src(lv_obj_t * obj)

// ../../lvgl/src/widgets/imagebutton/lv_imagebutton.h
lv_obj_t * lv_imagebutton_create(lv_obj_t * parent)
void lv_imagebutton_set_src(lv_obj_t * imagebutton, lv_imagebutton_state_t state, const void * src_left, const void * src_mid, const void * src_right)
void lv_imagebutton_set_state(lv_obj_t * imagebutton, lv_imagebutton_state_t state)

// ../../lvgl/src/widgets/keyboard/lv_keyboard.h
lv_obj_t * lv_keyboard_create(lv_obj_t * parent)
void lv_keyboard_set_textarea(lv_obj_t * kb, lv_obj_t * ta)
void lv_keyboard_set_mode(lv_obj_t * kb, lv_keyboard_mode_t mode)
void lv_keyboard_set_popovers(lv_obj_t * kb, bool en)
void lv_keyboard_set_map(lv_obj_t * kb, lv_keyboard_mode_t mode, const char * map[], const lv_buttonmatrix_ctrl_t ctrl_map[])
lv_obj_t * lv_keyboard_get_textarea(const lv_obj_t * kb)
lv_keyboard_mode_t lv_keyboard_get_mode(const lv_obj_t * kb)
bool lv_buttonmatrix_get_popovers(const lv_obj_t * obj)
static inline const char ** lv_keyboard_get_map_array(const lv_obj_t * kb)
static inline uint32_t lv_keyboard_get_selected_button(const lv_obj_t * obj)
static inline const char * lv_keyboard_get_button_text(const lv_obj_t * obj, uint32_t btn_id)

// ../../lvgl/src/widgets/label/lv_label.h
lv_obj_t * lv_label_create(lv_obj_t * parent)
void lv_label_set_text(lv_obj_t * obj, const char * text)
void lv_label_set_text_fmt(lv_obj_t * obj, const char * fmt, ...) LV_FORMAT_ATTRIBUTE(2, 3)
void lv_label_set_text_static(lv_obj_t * obj, const char * text)
void lv_label_set_long_mode(lv_obj_t * obj, lv_label_long_mode_t long_mode)
void lv_label_set_text_selection_start(lv_obj_t * obj, uint32_t index)
void lv_label_set_text_selection_end(lv_obj_t * obj, uint32_t index)
char * lv_label_get_text(const lv_obj_t * obj)
lv_label_long_mode_t lv_label_get_long_mode(const lv_obj_t * obj)
void lv_label_get_letter_pos(const lv_obj_t * obj, uint32_t char_id, lv_point_t * pos)
uint32_t lv_label_get_letter_on(const lv_obj_t * obj, lv_point_t * pos_in, bool bidi)
bool lv_label_is_char_under_pos(const lv_obj_t * obj, lv_point_t * pos)
uint32_t lv_label_get_text_selection_start(const lv_obj_t * obj)
uint32_t lv_label_get_text_selection_end(const lv_obj_t * obj)
void lv_label_ins_text(lv_obj_t * obj, uint32_t pos, const char * txt)
void lv_label_cut_text(lv_obj_t * obj, uint32_t pos, uint32_t cnt)

// ../../lvgl/src/widgets/led/lv_led.h
lv_obj_t * lv_led_create(lv_obj_t * parent)
void lv_led_set_color(lv_obj_t * led, lv_color_t color)
void lv_led_set_brightness(lv_obj_t * led, uint8_t bright)
void lv_led_on(lv_obj_t * led)
void lv_led_off(lv_obj_t * led)
void lv_led_toggle(lv_obj_t * led)
uint8_t lv_led_get_brightness(const lv_obj_t * obj)

// ../../lvgl/src/widgets/line/lv_line.h
lv_obj_t * lv_line_create(lv_obj_t * parent)
void lv_line_set_points(lv_obj_t * obj, const lv_point_precise_t points[], uint32_t point_num)
void lv_line_set_y_invert(lv_obj_t * obj, bool en)
bool lv_line_get_y_invert(const lv_obj_t * obj)

// ../../lvgl/src/widgets/list/lv_list.h
lv_obj_t * lv_list_create(lv_obj_t * parent)
lv_obj_t * lv_list_add_text(lv_obj_t * list, const char * txt)
lv_obj_t * lv_list_add_button(lv_obj_t * list, const void * icon, const char * txt)
const char * lv_list_get_button_text(lv_obj_t * list, lv_obj_t * btn)
void lv_list_set_button_text(lv_obj_t * list, lv_obj_t * btn, const char * txt)

// ../../lvgl/src/widgets/menu/lv_menu.h
lv_obj_t * lv_menu_create(lv_obj_t * parent)
lv_obj_t * lv_menu_page_create(lv_obj_t * parent, char const * const title)
lv_obj_t * lv_menu_cont_create(lv_obj_t * parent)
lv_obj_t * lv_menu_section_create(lv_obj_t * parent)
lv_obj_t * lv_menu_separator_create(lv_obj_t * parent)
void lv_menu_set_page(lv_obj_t * obj, lv_obj_t * page)
void lv_menu_set_page_title(lv_obj_t * page, char const * const title)
void lv_menu_set_page_title_static(lv_obj_t * page, char const * const title)
void lv_menu_set_sidebar_page(lv_obj_t * obj, lv_obj_t * page)
void lv_menu_set_mode_header(lv_obj_t * obj, lv_menu_mode_header_t mode)
void lv_menu_set_mode_root_back_button(lv_obj_t * obj, lv_menu_mode_root_back_button_t mode)
void lv_menu_set_load_page_event(lv_obj_t * menu, lv_obj_t * obj, lv_obj_t * page)
lv_obj_t * lv_menu_get_cur_main_page(lv_obj_t * obj)
lv_obj_t * lv_menu_get_cur_sidebar_page(lv_obj_t * obj)
lv_obj_t * lv_menu_get_main_header(lv_obj_t * obj)
lv_obj_t * lv_menu_get_main_header_back_button(lv_obj_t * obj)
lv_obj_t * lv_menu_get_sidebar_header(lv_obj_t * obj)
lv_obj_t * lv_menu_get_sidebar_header_back_button(lv_obj_t * obj)
bool lv_menu_back_button_is_root(lv_obj_t * menu, lv_obj_t * obj)
void lv_menu_clear_history(lv_obj_t * obj)

// ../../lvgl/src/widgets/msgbox/lv_msgbox.h
lv_obj_t * lv_msgbox_create(lv_obj_t * parent)
lv_obj_t * lv_msgbox_add_title(lv_obj_t * obj, const char * title)
lv_obj_t * lv_msgbox_add_header_button(lv_obj_t * obj, const void * icon)
lv_obj_t * lv_msgbox_add_text(lv_obj_t * obj, const char * text)
lv_obj_t * lv_msgbox_add_footer_button(lv_obj_t * obj, const char * text)
lv_obj_t * lv_msgbox_add_close_button(lv_obj_t * obj)
lv_obj_t * lv_msgbox_get_header(lv_obj_t * obj)
lv_obj_t * lv_msgbox_get_footer(lv_obj_t * obj)
lv_obj_t * lv_msgbox_get_content(lv_obj_t * obj)
lv_obj_t * lv_msgbox_get_title(lv_obj_t * obj)
void lv_msgbox_close(lv_obj_t * mbox)
void lv_msgbox_close_async(lv_obj_t * mbox)

// ../../lvgl/src/widgets/objx_templ/lv_objx_templ.h

// ../../lvgl/src/widgets/roller/lv_roller.h
lv_obj_t * lv_roller_create(lv_obj_t * parent)
void lv_roller_set_options(lv_obj_t * obj, const char * options, lv_roller_mode_t mode)
void lv_roller_set_selected(lv_obj_t * obj, uint32_t sel_opt, lv_anim_enable_t anim)
void lv_roller_set_visible_row_count(lv_obj_t * obj, uint32_t row_cnt)
uint32_t lv_roller_get_selected(const lv_obj_t * obj)
void lv_roller_get_selected_str(const lv_obj_t * obj, char * buf, uint32_t buf_size)
const char * lv_roller_get_options(const lv_obj_t * obj)
uint32_t lv_roller_get_option_count(const lv_obj_t * obj)

// ../../lvgl/src/widgets/scale/lv_scale.h
lv_obj_t * lv_scale_create(lv_obj_t * parent)
void lv_scale_set_mode(lv_obj_t * obj, lv_scale_mode_t mode)
void lv_scale_set_total_tick_count(lv_obj_t * obj, uint32_t total_tick_count)
void lv_scale_set_major_tick_every(lv_obj_t * obj, uint32_t major_tick_every)
void lv_scale_set_label_show(lv_obj_t * obj, bool show_label)
void lv_scale_set_range(lv_obj_t * obj, int32_t min, int32_t max)
void lv_scale_set_angle_range(lv_obj_t * obj, uint32_t angle_range)
void lv_scale_set_rotation(lv_obj_t * obj, int32_t rotation)
void lv_scale_set_line_needle_value(lv_obj_t * obj, lv_obj_t * needle_line, int32_t needle_length, int32_t value)
void lv_scale_set_image_needle_value(lv_obj_t * obj, lv_obj_t * needle_img, int32_t value)
void lv_scale_set_text_src(lv_obj_t * obj, const char * txt_src[])
void lv_scale_set_post_draw(lv_obj_t * obj, bool en)
lv_scale_section_t * lv_scale_add_section(lv_obj_t * obj)
void lv_scale_section_set_range(lv_scale_section_t * section, int32_t minor_range, int32_t major_range)
void lv_scale_section_set_style(lv_scale_section_t * section, uint32_t part, lv_style_t * section_part_style)
lv_scale_mode_t lv_scale_get_mode(lv_obj_t * obj)
int32_t lv_scale_get_total_tick_count(lv_obj_t * obj)
int32_t lv_scale_get_major_tick_every(lv_obj_t * obj)
bool lv_scale_get_label_show(lv_obj_t * obj)
uint32_t lv_scale_get_angle_range(lv_obj_t * obj)
int32_t lv_scale_get_range_min_value(lv_obj_t * obj)
int32_t lv_scale_get_range_max_value(lv_obj_t * obj)

// ../../lvgl/src/widgets/slider/lv_slider.h
lv_obj_t * lv_slider_create(lv_obj_t * parent)
static inline void lv_slider_set_value(lv_obj_t * obj, int32_t value, lv_anim_enable_t anim)
static inline void lv_slider_set_left_value(lv_obj_t * obj, int32_t value, lv_anim_enable_t anim)
static inline void lv_slider_set_range(lv_obj_t * obj, int32_t min, int32_t max)
static inline void lv_slider_set_mode(lv_obj_t * obj, lv_slider_mode_t mode)
static inline int32_t lv_slider_get_value(const lv_obj_t * obj)
static inline int32_t lv_slider_get_left_value(const lv_obj_t * obj)
static inline int32_t lv_slider_get_min_value(const lv_obj_t * obj)
static inline int32_t lv_slider_get_max_value(const lv_obj_t * obj)
bool lv_slider_is_dragged(const lv_obj_t * obj)
static inline lv_slider_mode_t lv_slider_get_mode(lv_obj_t * slider)
static inline bool lv_slider_is_symmetrical(lv_obj_t * obj)

// ../../lvgl/src/widgets/span/lv_span.h
void lv_span_stack_init(void)
void lv_span_stack_deinit(void)
lv_obj_t * lv_spangroup_create(lv_obj_t * parent)
lv_span_t * lv_spangroup_new_span(lv_obj_t * obj)
void lv_spangroup_delete_span(lv_obj_t * obj, lv_span_t * span)
void lv_span_set_text(lv_span_t * span, const char * text)
void lv_span_set_text_static(lv_span_t * span, const char * text)
void lv_spangroup_set_align(lv_obj_t * obj, lv_text_align_t align)
void lv_spangroup_set_overflow(lv_obj_t * obj, lv_span_overflow_t overflow)
void lv_spangroup_set_indent(lv_obj_t * obj, int32_t indent)
void lv_spangroup_set_mode(lv_obj_t * obj, lv_span_mode_t mode)
void lv_spangroup_set_max_lines(lv_obj_t * obj, int32_t lines)
lv_span_t * lv_spangroup_get_child(const lv_obj_t * obj, int32_t id)
uint32_t lv_spangroup_get_span_count(const lv_obj_t * obj)
lv_text_align_t lv_spangroup_get_align(lv_obj_t * obj)
lv_span_overflow_t lv_spangroup_get_overflow(lv_obj_t * obj)
int32_t lv_spangroup_get_indent(lv_obj_t * obj)
lv_span_mode_t lv_spangroup_get_mode(lv_obj_t * obj)
int32_t lv_spangroup_get_max_lines(lv_obj_t * obj)
int32_t lv_spangroup_get_max_line_height(lv_obj_t * obj)
uint32_t lv_spangroup_get_expand_width(lv_obj_t * obj, uint32_t max_width)
int32_t lv_spangroup_get_expand_height(lv_obj_t * obj, int32_t width)
void lv_spangroup_refr_mode(lv_obj_t * obj)

// ../../lvgl/src/widgets/spinbox/lv_spinbox.h
lv_obj_t * lv_spinbox_create(lv_obj_t * parent)
void lv_spinbox_set_value(lv_obj_t * obj, int32_t v)
void lv_spinbox_set_rollover(lv_obj_t * obj, bool rollover)
void lv_spinbox_set_digit_format(lv_obj_t * obj, uint32_t digit_count, uint32_t sep_pos)
void lv_spinbox_set_step(lv_obj_t * obj, uint32_t step)
void lv_spinbox_set_range(lv_obj_t * obj, int32_t range_min, int32_t range_max)
void lv_spinbox_set_cursor_pos(lv_obj_t * obj, uint32_t pos)
void lv_spinbox_set_digit_step_direction(lv_obj_t * obj, lv_dir_t direction)
bool lv_spinbox_get_rollover(lv_obj_t * obj)
int32_t lv_spinbox_get_value(lv_obj_t * obj)
int32_t lv_spinbox_get_step(lv_obj_t * obj)
void lv_spinbox_step_next(lv_obj_t * obj)
void lv_spinbox_step_prev(lv_obj_t * obj)
void lv_spinbox_increment(lv_obj_t * obj)
void lv_spinbox_decrement(lv_obj_t * obj)

// ../../lvgl/src/widgets/spinner/lv_spinner.h
lv_obj_t * lv_spinner_create(lv_obj_t * parent)
void lv_spinner_set_anim_params(lv_obj_t * obj, uint32_t t, uint32_t angle)

// ../../lvgl/src/widgets/switch/lv_switch.h
lv_obj_t * lv_switch_create(lv_obj_t * parent)

// ../../lvgl/src/widgets/table/lv_table.h
lv_obj_t * lv_table_create(lv_obj_t * parent)
void lv_table_set_cell_value(lv_obj_t * obj, uint32_t row, uint32_t col, const char * txt)
void lv_table_set_cell_value_fmt(lv_obj_t * obj, uint32_t row, uint32_t col, const char * fmt, ...) LV_FORMAT_ATTRIBUTE(4, 5)
void lv_table_set_row_count(lv_obj_t * obj, uint32_t row_cnt)
void lv_table_set_column_count(lv_obj_t * obj, uint32_t col_cnt)
void lv_table_set_column_width(lv_obj_t * obj, uint32_t col_id, int32_t w)
void lv_table_add_cell_ctrl(lv_obj_t * obj, uint32_t row, uint32_t col, lv_table_cell_ctrl_t ctrl)
void lv_table_clear_cell_ctrl(lv_obj_t * obj, uint32_t row, uint32_t col, lv_table_cell_ctrl_t ctrl)
void lv_table_set_cell_user_data(lv_obj_t * obj, uint16_t row, uint16_t col, void * user_data)
const char * lv_table_get_cell_value(lv_obj_t * obj, uint32_t row, uint32_t col)
uint32_t lv_table_get_row_count(lv_obj_t * obj)
uint32_t lv_table_get_column_count(lv_obj_t * obj)
int32_t lv_table_get_column_width(lv_obj_t * obj, uint32_t col)
bool lv_table_has_cell_ctrl(lv_obj_t * obj, uint32_t row, uint32_t col, lv_table_cell_ctrl_t ctrl)
void lv_table_get_selected_cell(lv_obj_t * obj, uint32_t * row, uint32_t * col)
void * lv_table_get_cell_user_data(lv_obj_t * obj, uint16_t row, uint16_t col)

// ../../lvgl/src/widgets/tabview/lv_tabview.h
lv_obj_t * lv_tabview_create(lv_obj_t * parent)
lv_obj_t * lv_tabview_add_tab(lv_obj_t * obj, const char * name)
void lv_tabview_rename_tab(lv_obj_t * obj, uint32_t idx, const char * new_name)
void lv_tabview_set_active(lv_obj_t * obj, uint32_t idx, lv_anim_enable_t anim_en)
void lv_tabview_set_tab_bar_position(lv_obj_t * obj, lv_dir_t dir)
void lv_tabview_set_tab_bar_size(lv_obj_t * obj, int32_t size)
uint32_t lv_tabview_get_tab_count(lv_obj_t * obj)
uint32_t lv_tabview_get_tab_active(lv_obj_t * obj)
lv_obj_t * lv_tabview_get_content(lv_obj_t * obj)
lv_obj_t * lv_tabview_get_tab_bar(lv_obj_t * obj)

// ../../lvgl/src/widgets/textarea/lv_textarea.h
lv_obj_t * lv_textarea_create(lv_obj_t * parent)
void lv_textarea_add_char(lv_obj_t * obj, uint32_t c)
void lv_textarea_add_text(lv_obj_t * obj, const char * txt)
void lv_textarea_delete_char(lv_obj_t * obj)
void lv_textarea_delete_char_forward(lv_obj_t * obj)
void lv_textarea_set_text(lv_obj_t * obj, const char * txt)
void lv_textarea_set_placeholder_text(lv_obj_t * obj, const char * txt)
void lv_textarea_set_cursor_pos(lv_obj_t * obj, int32_t pos)
void lv_textarea_set_cursor_click_pos(lv_obj_t * obj, bool en)
void lv_textarea_set_password_mode(lv_obj_t * obj, bool en)
void lv_textarea_set_password_bullet(lv_obj_t * obj, const char * bullet)
void lv_textarea_set_one_line(lv_obj_t * obj, bool en)
void lv_textarea_set_accepted_chars(lv_obj_t * obj, const char * list)
void lv_textarea_set_max_length(lv_obj_t * obj, uint32_t num)
void lv_textarea_set_insert_replace(lv_obj_t * obj, const char * txt)
void lv_textarea_set_text_selection(lv_obj_t * obj, bool en)
void lv_textarea_set_password_show_time(lv_obj_t * obj, uint32_t time)
void lv_textarea_set_align(lv_obj_t * obj, lv_text_align_t align)
const char * lv_textarea_get_text(const lv_obj_t * obj)
const char * lv_textarea_get_placeholder_text(lv_obj_t * obj)
lv_obj_t * lv_textarea_get_label(const lv_obj_t * obj)
uint32_t lv_textarea_get_cursor_pos(const lv_obj_t * obj)
bool lv_textarea_get_cursor_click_pos(lv_obj_t * obj)
bool lv_textarea_get_password_mode(const lv_obj_t * obj)
const char * lv_textarea_get_password_bullet(lv_obj_t * obj)
bool lv_textarea_get_one_line(const lv_obj_t * obj)
const char * lv_textarea_get_accepted_chars(lv_obj_t * obj)
uint32_t lv_textarea_get_max_length(lv_obj_t * obj)
bool lv_textarea_text_is_selected(const lv_obj_t * obj)
bool lv_textarea_get_text_selection(lv_obj_t * obj)
uint32_t lv_textarea_get_password_show_time(lv_obj_t * obj)
uint32_t lv_textarea_get_current_char(lv_obj_t * obj)
void lv_textarea_clear_selection(lv_obj_t * obj)
void lv_textarea_cursor_right(lv_obj_t * obj)
void lv_textarea_cursor_left(lv_obj_t * obj)
void lv_textarea_cursor_down(lv_obj_t * obj)
void lv_textarea_cursor_up(lv_obj_t * obj)

// ../../lvgl/src/widgets/tileview/lv_tileview.h
lv_obj_t * lv_tileview_create(lv_obj_t * parent)
lv_obj_t * lv_tileview_add_tile(lv_obj_t * tv, uint8_t col_id, uint8_t row_id, lv_dir_t dir)
void lv_tileview_set_tile(lv_obj_t * tv, lv_obj_t * tile_obj, lv_anim_enable_t anim_en)
void lv_tileview_set_tile_by_index(lv_obj_t * tv, uint32_t col_id, uint32_t row_id, lv_anim_enable_t anim_en)
lv_obj_t * lv_tileview_get_tile_active(lv_obj_t * obj)

// ../../lvgl/src/widgets/win/lv_win.h

// ../../LVGL_assets/src/lv_theme_haspmota.h
lv_theme_t * lv_theme_haspmota_init(lv_display_t * disp, lv_color_t color_primary, lv_color_t color_secondary, bool dark, const lv_font_t * font)
bool lv_theme_haspmota_is_inited(void)

// ../src/lv_berry.h
void be_load_lvgl_classes(bvm *vm)
void lv_image_set_tasmota_logo(lv_obj_t * img)
lv_style_t * lv_span_get_style(lv_span_t * span)
lv_area_t * lv_bar_get_indic_area(lv_obj_t * bar)
lv_point_t * lv_line_get_points(lv_obj_t * line)
int lv_line_get_points_num(lv_obj_t * line)

